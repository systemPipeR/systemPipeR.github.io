<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sysPipe â€“ Development tools</title>
    <link>/sps/dev/</link>
    <description>Recent content in Development tools on sysPipe</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/sps/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Sps: UI components</title>
      <link>/sps/dev/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/ui/</guid>
      <description>
        
        
        &lt;p&gt;SPS provides a lot of nice-looking UI components. If you want to design your next
Shiny App, take a look at these components. Here is a &lt;a href=&#34;https://lezhang.shinyapps.io/spsComps&#34;&gt;online demo&lt;/a&gt;
of these components.&lt;/p&gt;
&lt;p&gt;After SPS 1.1, these components are separated into a supporting package called
&lt;strong&gt;spsComps&lt;/strong&gt; (systemPipeShiny Components), and you can install from CRAN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Develop version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;spsComps&amp;quot;, quietly=TRUE))
    remotes::install_github(&amp;quot;lz100/spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Server functions</title>
      <link>/sps/dev/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/server/</guid>
      <description>
        
        
        &lt;p&gt;SPS provides a many user Shiny server-end functions. If you want to design your next
Shiny App, take a look at these server functions. Here is a &lt;a href=&#34;https://lezhang.shinyapps.io/spsComps&#34;&gt;online demo&lt;/a&gt;
of these server components.&lt;/p&gt;
&lt;p&gt;After SPS 1.1, these components are separated into a supporting package called
&lt;strong&gt;spsComps&lt;/strong&gt; (systemPipeShiny Components), and you can install from CRAN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Develop version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;spsComps&amp;quot;, quietly=TRUE))
    remotes::install_github(&amp;quot;lz100/spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: General utilities</title>
      <link>/sps/dev/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/general/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;SPS framework come with a plenty of useful general R utility functions, like
pretty logging, package namespace checking, URL checking, and more.&lt;/p&gt;
&lt;p&gt;Since SPS 1.1, these functions are separated into a supporting package called
&lt;strong&gt;spsUtil&lt;/strong&gt; (systemPipeShiny Utility). You can install it from CRAN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spsUtil&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Develop version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;spsUtil&amp;quot;, quietly=TRUE))
    remotes::install_github(&amp;quot;lz100/spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>
