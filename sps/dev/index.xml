<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sysPipe â€“ Developer tools</title>
    <link>/sps/dev/</link>
    <description>Recent content in Developer tools on sysPipe</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/sps/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Sps: spsComps</title>
      <link>/sps/dev/spscomps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/spscomps/</guid>
      <description>
        
        
        &lt;h2 id=&#34;sps-components-package&#34;&gt;SPS Components package&lt;/h2&gt;
&lt;p&gt;systemPipeShiny Components (spsComps) package is a collection of custom UI  and
server components that are used in SPS main framework. If you see a component
in SPS but want to outside the SPS framework, like in your own Shiny apps,
take a look at these components. Here is a &lt;strong&gt;&lt;a href=&#34;https://lezhang.shinyapps.io/spsComps&#34;&gt;online demo&lt;/a&gt;&lt;/strong&gt;
of these components.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Read the &lt;a href=&#34;..&#34;&gt;developer tools&lt;/a&gt; main page, not repeating here.&lt;/p&gt;
&lt;h2 id=&#34;category&#34;&gt;Category&lt;/h2&gt;
&lt;p&gt;{spsComps} can be divided into two major categories: &lt;a href=&#34;ui&#34;&gt;UI&lt;/a&gt; and &lt;a href=&#34;server&#34;&gt;server&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt;: Shiny or HTML UI components, for example, a box, a gallery, a button, etc. With
these most of components, you do &lt;strong&gt;NOT need a server&lt;/strong&gt;, so they are compatible with
R markdown documents. See the &lt;a href=&#34;ui&#34;&gt;UI&lt;/a&gt; page and its source code how we use the
components in a Rmd doucment. However, some UI components has server side functions,
mostly like &lt;code&gt;updateXXX&lt;/code&gt; functions. Mainly these functions are used to update/change the
UI based on user behaviors. It is totally okay to use the UI functions without the
server functions (you will get static UI).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;: &lt;strong&gt;can only be run in the Shiny server&lt;/strong&gt;. These functions are designed
to make back-end progress easier, extensions of original shiny Server functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;functions-reference-manual&#34;&gt;Functions reference manual&lt;/h2&gt;
&lt;p&gt;In documents, we only highlight some important functions. Please read
the &lt;a href=&#34;../../sps/sps_funcs&#34;&gt;reference manuals&lt;/a&gt; for details of every function.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: drawer</title>
      <link>/sps/dev/drawer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/drawer/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;This section talks about the supporting package {&lt;a href=&#34;https://github.com/lz100/drawer&#34;&gt;drawer&lt;/a&gt;}&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Sps: spsUtil</title>
      <link>/sps/dev/spsutil/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/dev/spsutil/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;SPS framework come with a plenty of useful general R utility functions, like
pretty logging, package namespace checking, URL checking, and more.&lt;/p&gt;
&lt;p&gt;Since SPS 1.1, these functions are separated into a supporting package called
&lt;strong&gt;spsUtil&lt;/strong&gt; (systemPipeShiny Utility). You can install it from CRAN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spsUtil&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Develop version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;spsUtil&amp;quot;, quietly=TRUE))
    remotes::install_github(&amp;quot;lz100/spsComps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>
