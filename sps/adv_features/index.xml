<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sysPipe – Advanced features</title>
    <link>/sps/adv_features/</link>
    <description>Recent content in Advanced features on sysPipe</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/sps/adv_features/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Sps: Configuration</title>
      <link>/sps/adv_features/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/config/</guid>
      <description>
        
        
        &lt;p&gt;SPS has many options you can change. These options will determine how the app
behaves.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;config-sps&#34;&gt;Config SPS&lt;/h2&gt;
&lt;p&gt;Let us start by creating an example SPS project. For demo purpose, we are using the
&lt;code&gt;/tmp&lt;/code&gt; folder but one should use a regular location instead of the temp in a  real
case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
spsInit(app_path = tempdir(), project_name = &amp;quot;config_demo&amp;quot;, overwrite = TRUE, change_wd = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-DANGER] 2021-12-15 00:08:50 Done, Db created at &#39;/tmp/Rtmpgas05w/config_demo/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-12-15 00:08:50 Key md5 405b200ceb5c90dbb5c097c88d582dcb
## [SPS-INFO] 2021-12-15 00:08:50 SPS project setup done!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## save project path 
(sps_dir &amp;lt;- file.path(tempdir(), &amp;quot;config_demo&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/tmp/Rtmpgas05w/config_demo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To reproduce code locally, run the following chunk instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(systemPipeShiny)
spsInit()
sps_dir &amp;lt;- normalizePath(&amp;quot;.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;STYLE type=&#39;text/css&#39; scoped&gt;
PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};
&lt;/STYLE&gt;
&lt;h2 id=&#34;sps-structure&#34;&gt;SPS structure&lt;/h2&gt;
&lt;pre&gt;
SPS_xx/  
├── server.R               &lt;span class=&#34;text-success&#34;&gt;|&lt;/span&gt; 
├── global.R               &lt;span class=&#34;text-success&#34;&gt;| Most important server, UI and global files, unless special needs, `global.R` is the only file you need to edit manually&lt;/span&gt;   
├── ui.R                   &lt;span class=&#34;text-success&#34;&gt;|&lt;/span&gt;  
├── deploy.R               &lt;span class=&#34;text-info&#34;&gt;| Deploy helper file&lt;/span&gt;  
├── config                 &lt;span class=&#34;text-success&#34;&gt;| Important app config files. Do not edit them by hand if you don&#39;t know&lt;/span&gt;  
│   ├── sps.db             &lt;span class=&#34;text-gray&#34;&gt;| SPS database&lt;/span&gt; 
│   ├── sps_options.yaml   &lt;span class=&#34;text-gray&#34;&gt;| SPS default option list&lt;/span&gt; 
│   └── tabs.csv           &lt;span class=&#34;text-gray&#34;&gt;| SPS tab registration information&lt;/span&gt; 
├── data                   &lt;span class=&#34;text-primary&#34;&gt;| App example data files&lt;/span&gt; 
│   ├── xx.csv             
├── R                      &lt;span class=&#34;text-primary&#34;&gt;| All SPS additional tab files, helper R function, interactive guides files&lt;/span&gt; 
│   ├── tab_xx.R            
├── README.md              
├── results                &lt;span class=&#34;text-gray&#34;&gt;| Not in use for this current version, but you can store some data been generated from the app&lt;/span&gt; 
│   └── README.md          
└── www                    &lt;span class=&#34;text-primary&#34;&gt;| Internet resources&lt;/span&gt;  
    ├── css                &lt;span class=&#34;text-info&#34;&gt;| CSS files&lt;/span&gt;  
    │   └── sps.css         
    ├── img                &lt;span class=&#34;text-info&#34;&gt;| App image resources&lt;/span&gt;    
    │   └── xx.png         
    ├── js                 &lt;span class=&#34;text-info&#34;&gt;| Javascripts&lt;/span&gt;
    │   └── xx.js           
    ├── loading_themes     &lt;span class=&#34;text-info&#34;&gt;| Loading screen files&lt;/span&gt; 
    │   └── xx.html         
    └── plot_list          &lt;span class=&#34;text-info&#34;&gt;| Image files for custom visualization tab thumbnails&lt;/span&gt;  
        └── plot_xx.jpg      
&lt;/pre&gt;
&lt;p&gt;This is a reminder of what you will get when a SPS project is initiated with &lt;code&gt;spsInit()&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For most users, the &lt;code&gt;global.R&lt;/code&gt; file is the only file that one needs to make change.&lt;/li&gt;
&lt;li&gt;The second important files are the files inside &lt;code&gt;config&lt;/code&gt; folder. For normal users,
these files are controlled by SPS functions. No need to make any modification. For advanced users, deep customization is possible.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sps_options.yaml&lt;/code&gt; stores all default and valid values for SPS, details are
listed &lt;a href=&#34;#app-options&#34;&gt;below&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabs.csv&lt;/code&gt; all SPS tab registration information. Read &lt;a href=&#34;../tabs&#34;&gt;Manage tabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sps.db&lt;/code&gt; A SQLite database to store data generated in SPS. Read &lt;a href=&#34;../database&#34;&gt;SPS database&lt;/a&gt;
for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; folder stores all custom tab files, your helper functions. This &lt;code&gt;.R&lt;/code&gt; or &lt;code&gt;.r&lt;/code&gt; files under this
folder &lt;strong&gt;will be automatically sourced&lt;/strong&gt; when SPS starts. This is discussed in
&lt;a href=&#34;../tabs&#34;&gt;Manage tabs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;www&lt;/code&gt; folder is where you add the internet resources, like images you want to show in
the app, &lt;code&gt;css&lt;/code&gt; style sheets to attach. Read more &lt;a href=&#34;https://stevenmortimer.com/tips-for-making-professional-shiny-apps-with-r/#create-a-www-folder&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;app-options&#34;&gt;App options&lt;/h2&gt;
&lt;h3 id=&#34;viewset-all-options&#34;&gt;View/Set all options&lt;/h3&gt;
&lt;p&gt;App options in SPS are controlled by &amp;ldquo;SPS options&amp;rdquo;. These options can change
app appearance, debugging level, server behaviors, &lt;em&gt;etc&lt;/em&gt;. The valid options can
be found and change on the &lt;code&gt;global.R&lt;/code&gt; file. They are similar to &lt;em&gt;Shiny&lt;/em&gt; options,
but unlike &lt;em&gt;shiny&lt;/em&gt; options that are single values, SPS options are passed using the &lt;code&gt;Option(sps = list(...))&lt;/code&gt;
function in &lt;code&gt;global.R&lt;/code&gt; as a group. To view all options and their default, valid
values(&amp;rsquo;*&amp;rsquo; means any value is okay) see &lt;code&gt;global.R&lt;/code&gt; from
the line starting with &lt;em&gt;## SPS options&lt;/em&gt;. We provided some comments below that line to
generally describe what each option is and valid values for options. Use function
&lt;code&gt;spsOptDefaults&lt;/code&gt; to see the default and other valid options.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOptDefaults(app_path = sps_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;PRE class=&#34;fansi fansi-output&#34;&gt;&lt;CODE&gt;## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;systemPipeShiny 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title_logo&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;img/sps_small.png 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;mode&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;local 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;server 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_screen&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_theme&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;random 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;use_crayon&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;verbose&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_page&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_url&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;admin 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;warning_toast&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_wf&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_rnaseq&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_ggplot&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_welcome&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_vs_main&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_canvas&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_about&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;note_url&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;traceback&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;is_demo&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;welcome_guide&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## * means any value will be accepted
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;p&gt;After the app has started once, you can use &lt;code&gt;spsOptions()&lt;/code&gt; to see all current settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOptions(app_path = sps_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;PRE class=&#34;fansi fansi-output&#34;&gt;&lt;CODE&gt;## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;Current project option settings:&lt;/span&gt; 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;systemPipeShiny &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title_logo&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;img/sps_small.png &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;mode&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;local &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_screen&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;FALSE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_theme&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;random &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;use_crayon&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;verbose&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;FALSE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_page&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_url&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;admin &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;warning_toast&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;FALSE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_wf&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_rnaseq&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_ggplot&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_welcome&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_vs_main&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_canvas&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_about&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;note_url&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;traceback&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;FALSE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;is_demo&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;FALSE &lt;/span&gt;
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;welcome_guide&lt;/span&gt;:
##     &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;TRUE &lt;/span&gt;
## ********
## Option legends:
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;    known options    &lt;/span&gt;&lt;span style=&#39;color: #BBBB00; font-weight: bold;&#39;&gt;    Hidden/custom options* and values+
## &lt;/span&gt;Value legends:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    same as default values    &lt;/span&gt;    different from defaults+
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;p&gt;A copy of options in &lt;code&gt;global.R&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(.list = list(
    title = &amp;quot;systemPipeShiny&amp;quot;,
    title_logo = &amp;quot;img/sps_small.png&amp;quot;,
    mode = &amp;quot;local&amp;quot;,
    warning_toast = FALSE,
    login_screen = FALSE,
    login_theme = &amp;quot;random&amp;quot;,
    use_crayon = TRUE,
    verbose = FALSE,
    admin_page = TRUE,
    admin_url = &amp;quot;admin&amp;quot;,
    note_url = &#39;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml&#39;,
    tab_welcome = TRUE,
    tab_vs_main = TRUE,
    tab_canvas = TRUE,
    tab_about = TRUE,
    module_wf = TRUE,
    module_rnaseq = TRUE,
    module_ggplot = TRUE,
    traceback = FALSE,
    is_demo = FALSE,
    welcome_guide = TRUE
))
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;color:var(--danger)&#34;&gt;Note: Do not worry if you set some invalid values, on app start, `sps()` will check all SPS
options, ignore unknown values and set invalid values back to default. You will see warning 
messages on console to tell you specifically what is wrong with your options.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mode&lt;/td&gt;
&lt;td&gt;running mode&lt;/td&gt;
&lt;td&gt;&amp;ldquo;local&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&amp;ldquo;server&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;App title&lt;/td&gt;
&lt;td&gt;&amp;ldquo;systemPipeShiny&amp;rdquo;&lt;/td&gt;
&lt;td&gt;any string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title_logo&lt;/td&gt;
&lt;td&gt;App logo to display on browser tab&lt;/td&gt;
&lt;td&gt;&amp;ldquo;img/sps_small.png&amp;rdquo;&lt;/td&gt;
&lt;td&gt;any path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;warning_toast&lt;/td&gt;
&lt;td&gt;show security warnings?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;login_screen&lt;/td&gt;
&lt;td&gt;add login screen?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;login_theme&lt;/td&gt;
&lt;td&gt;login screen theme&lt;/td&gt;
&lt;td&gt;&amp;ldquo;random&amp;rdquo;&lt;/td&gt;
&lt;td&gt;see details&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;use_crayon&lt;/td&gt;
&lt;td&gt;colorful console message?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;verbose&lt;/td&gt;
&lt;td&gt;more details for SPS functions?&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;admin_page&lt;/td&gt;
&lt;td&gt;enable admin page?&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;admin_url&lt;/td&gt;
&lt;td&gt;admin_page query url&lt;/td&gt;
&lt;td&gt;&amp;ldquo;admin&amp;rdquo;&lt;/td&gt;
&lt;td&gt;any string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;warning_toast&lt;/td&gt;
&lt;td&gt;for internal test only&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module_wf&lt;/td&gt;
&lt;td&gt;load workflow module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module_rnaseq&lt;/td&gt;
&lt;td&gt;load RNAseq module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module_ggplot&lt;/td&gt;
&lt;td&gt;load quick ggplot module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_welcome&lt;/td&gt;
&lt;td&gt;load welcome tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_vs_main&lt;/td&gt;
&lt;td&gt;load custom visualization main tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_canvas&lt;/td&gt;
&lt;td&gt;load Canvas tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_about&lt;/td&gt;
&lt;td&gt;load about tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;note_url&lt;/td&gt;
&lt;td&gt;SPS notification remote URL&lt;/td&gt;
&lt;td&gt;see code above&lt;/td&gt;
&lt;td&gt;any URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_demo&lt;/td&gt;
&lt;td&gt;useful if deploy the app as a demo&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;welcome_guide&lt;/td&gt;
&lt;td&gt;enable the welcome guide&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;app_path&lt;/td&gt;
&lt;td&gt;hidden, automatically added&lt;/td&gt;
&lt;td&gt;N.A.&lt;/td&gt;
&lt;td&gt;N.A.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;details&#34;&gt;Details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: see [&lt;a href=&#34;../app_security&#34;&gt;App security&lt;/a&gt;] this option will change how
the upload files are selected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title &amp;amp; title_logo&lt;/strong&gt;: see [&lt;a href=&#34;../other_customizations&#34;&gt;Other customizations&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warning_toast&lt;/strong&gt;: see [&lt;a href=&#34;../app_security&#34;&gt;App security&lt;/a&gt;],
A toast pop-up message to help you check pre-deploy for security problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;login_screen &amp;amp; login_theme &amp;amp; admin_page &amp;amp; admin_url&lt;/strong&gt;:
see [&lt;a href=&#34;../login&#34;&gt;Accounts, Login and Admin&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;verbose&lt;/strong&gt;: Give you more information on debugging. Most SPS core functions
has this option. If it is on, more debugging information will be printed
on console. See [&lt;a href=&#34;../debug&#34;&gt;Debugging&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module_xx &amp;ndash; tab_xx&lt;/strong&gt;: see [&lt;a href=&#34;../displaytabs&#34;&gt;Toggle tabs&lt;/a&gt;] for loading and unloading
tabs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tab_xx&lt;/strong&gt;: see [&lt;a href=&#34;../overwritetabs&#34;&gt;Overwrite tabs&lt;/a&gt;] for customizing core SPS default tabs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;note_url&lt;/strong&gt;: see [&lt;a href=&#34;../notification&#34;&gt;Notification system&lt;/a&gt;] for customizing SPS notifications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_demo&lt;/strong&gt;: see [&lt;a href=&#34;../../sps/modules/workflow/#is_demo-option&#34;&gt;Workflow module&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;welcome_guide&lt;/strong&gt;: whether to enable the welcome guide on app start, see first image on &lt;a href=&#34;../guide&#34;&gt;SPS guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_path&lt;/strong&gt;: a hidden option. This will be added after the app starts. If not specified in
&lt;code&gt;sps()&lt;/code&gt;, use current working directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;viewset-a-single-option&#34;&gt;View/Set a single option&lt;/h3&gt;
&lt;p&gt;SPS values are globally set, which means you can get/change the these options at
inside any R code, R functions and while the app is running (change options after app started
is not recommended).&lt;/p&gt;
&lt;p&gt;To view a single option value, use &lt;code&gt;spsOption(opt = &amp;quot;OPTION_NAME&amp;quot;)&lt;/code&gt;; to overwrite a single
option, use &lt;code&gt;spsOption(opt = &amp;quot;OPTION_NAME&amp;quot;, value = &amp;quot;NEW_VALUE&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(opt = &amp;quot;mode&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To overwrite the &amp;ldquo;mode&amp;rdquo; option:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(opt = &amp;quot;mode&amp;quot;, &amp;quot;local&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check again, the value has changed to &amp;ldquo;local&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(opt = &amp;quot;mode&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any option does not exist, or the value is &amp;ldquo;empty&amp;rdquo; or &lt;code&gt;0&lt;/code&gt;, when getting the value &lt;code&gt;spsOption&lt;/code&gt; will return &lt;code&gt;FALSE&lt;/code&gt;.
Common &amp;ldquo;empty&amp;rdquo; values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length(value) == 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; (empty string)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the help file of &lt;code&gt;?emptyIsFalse&lt;/code&gt; for more information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(opt = &amp;quot;random_opt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, these &amp;ldquo;empty&amp;rdquo; values can be meaningful in some cases, so use &lt;code&gt;empty_is_false = FALSE&lt;/code&gt;
to return the original value instead of &lt;code&gt;FALSE&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(opt = &amp;quot;random_opt&amp;quot;, empty_is_false = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-your-own-options&#34;&gt;Add your own options&lt;/h2&gt;
&lt;p&gt;SPS is very flexible which allows you to add your own options. To do so, you need
to edit the &amp;ldquo;&lt;code&gt;config/sps_options.yaml&lt;/code&gt;&amp;rdquo; file under your project root.&lt;/p&gt;
&lt;p&gt;You can use other options as templates to add more. There are two required entries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;: will be used as default when you load SPS package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;other&lt;/code&gt;: Other valid options. If your user provided a value that is other than
the &lt;code&gt;default&lt;/code&gt; or the &lt;code&gt;other&lt;/code&gt;, SPS will show warnings and use default instead.
You can write &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; as the &lt;code&gt;other&lt;/code&gt; value. It means any value will be accepted.
SPS will skip to check &lt;code&gt;other&lt;/code&gt; valid values for this option.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently, the &lt;code&gt;default&lt;/code&gt; value can only be length of 1 but &lt;code&gt;other&lt;/code&gt; value can be a
yaml array, which use &lt;code&gt;[]&lt;/code&gt; to define: &lt;code&gt;[value1, value2, ...]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, we can add some but opening the file with a text editor, here we do
it programmatically:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_options &amp;lt;- 
&#39;
my_opt1:
    default: true
    other: [false]

my_opt2:
    default: &amp;quot;a&amp;quot;
    other: [&amp;quot;*&amp;quot;]
&#39;
write(x = new_options, file = file.path(sps_dir, &amp;quot;config&amp;quot;, &amp;quot;sps_options.yaml&amp;quot;), append = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can use &lt;code&gt;spsOptDefaults&lt;/code&gt; to check&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOptDefaults(app_path = sps_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;PRE class=&#34;fansi fansi-output&#34;&gt;&lt;CODE&gt;## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;systemPipeShiny 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;title_logo&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;img/sps_small.png 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;mode&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;local 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;server 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_screen&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;login_theme&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;random 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;use_crayon&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;verbose&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_page&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;admin_url&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;admin 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;warning_toast&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_wf&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_rnaseq&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;module_ggplot&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_welcome&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_vs_main&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_canvas&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;tab_about&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;note_url&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;traceback&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;is_demo&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;welcome_guide&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;my_opt1&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;TRUE 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;FALSE 
## &lt;span style=&#39;color: #0000BB; font-weight: bold;&#39;&gt;my_opt2&lt;/span&gt;:
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Default: &lt;/span&gt;a 
## &lt;span style=&#39;color: #00BB00; font-weight: bold;&#39;&gt;    Other: &lt;/span&gt;* 
## * means any value will be accepted
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;p&gt;You can see the &lt;code&gt;my_opt1&lt;/code&gt; and &lt;code&gt;my_opt2&lt;/code&gt; have been added to SPS options.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Manage tabs</title>
      <link>/sps/adv_features/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/tabs/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;sps-tabs&#34;&gt;SPS tabs&lt;/h2&gt;
&lt;p&gt;In SPS, &lt;strong&gt;tab&lt;/strong&gt; is the basic component of a functionality unit. For example, all the &lt;a href=&#34;../../sps/modules/&#34;&gt;Modules&lt;/a&gt;
in SPS are complex tabs with many small sub-tabs, the &lt;a href=&#34;../../sps/canvas/&#34;&gt;Canvas&lt;/a&gt; is another independent tab providing
image editing features and an &lt;em&gt;user custom tab&lt;/em&gt; is also a SPS tab.&lt;/p&gt;
&lt;p&gt;From the developer&amp;rsquo;s view, all SPS tabs are &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny Modules{blk}&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To understand how SPS tabs work, we will demonstrate with a SPS project. For demo purpose, we are using the
&lt;code&gt;/tmp&lt;/code&gt; folder but one should use a regular location instead of the temp in a  real
case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
spsInit(app_path = tempdir(), project_name = &amp;quot;tab_demo&amp;quot;, overwrite = TRUE, change_wd = FALSE)
## [SPS-INFO] 2021-04-19 23:16:52 Start to create a new SPS project
## [SPS-INFO] 2021-04-19 23:16:52 Create project under /tmp/RtmpjAYUc0/tab_demo
## [SPS-INFO] 2021-04-19 23:16:52 Now copy files
## [SPS-INFO] 2021-04-19 23:16:52 Create SPS database
## [SPS-INFO] 2021-04-19 23:16:52 Created SPS database method container
## [SPS-INFO] 2021-04-19 23:16:52 Creating SPS db...
## [SPS-DANGER] 2021-04-19 23:16:52 Done, Db created at &#39;/tmp/RtmpjAYUc0/tab_demo/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-19 23:16:52 Key md5 ecdf3312953a6bcdaea49e6d85954b80
## [SPS-INFO] 2021-04-19 23:16:52 SPS project setup done!
## save project path 
(sps_dir &amp;lt;- file.path(tempdir(), &amp;quot;tab_demo&amp;quot;))
## [1] &amp;quot;/tmp/RtmpjAYUc0/tab_demo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To reproduce code locally, run the following chunk instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(systemPipeShiny)
spsInit()
sps_dir &amp;lt;- normalizePath(&amp;quot;.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tab-registration&#34;&gt;Tab registration&lt;/h2&gt;
&lt;p&gt;In SPS, all tabs are controlled by the &lt;em&gt;config/tabs.csv&lt;/em&gt; file. To see what kind of
tabs you have with current project. use the &lt;code&gt;spsTabInfo&lt;/code&gt; function. It returns a tibble
of current tab information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsTabInfo(app_path = sps_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 8
##    tab_id   display_label    type  type_sub image displayed tab_file_name plugin
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; 
##  1 core_ab… About this App   core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  2 core_ca… Canvas           core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  3 core_we… Home             core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  4 core_ri… Internal use on… core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  5 core_top Top push bars    core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  6 module_… Module Main Page core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  7 wf       Workflow module  modu… &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  8 vs_rnas… RNAseq module    modu… &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
##  9 vs_esq   Quick ggplot mo… modu… &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
## 10 vs_main  custom tabs mai… core  &amp;quot;&amp;quot;       &amp;quot;&amp;quot;    1         No file for … &amp;quot;core&amp;quot;
## 11 vs_exam… My custom plott… vs    &amp;quot;plot&amp;quot;   &amp;quot;&amp;quot;    1         tab_vs_examp… &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tab_id&lt;/strong&gt;: A unique string ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;display_label&lt;/strong&gt;: for type is &amp;ldquo;core&amp;rdquo; or &amp;ldquo;module&amp;rdquo;, this is only some description, but for you own custom tabs,
this value will be used as a display tab name on left sidebar on SPS UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: tab category, &amp;ldquo;core&amp;rdquo;, &amp;ldquo;module&amp;rdquo; and &amp;ldquo;vs&amp;rdquo; (visualization).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type_sub&lt;/strong&gt;: more specific category, current only &amp;ldquo;plot&amp;rdquo; (plotting)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;image&lt;/strong&gt;: If this is an user custom tab, providing an image path will display the image in
visualization main tab gallery. If it not provided, a warning will be given on app
starts and an &amp;ldquo;No image&amp;rdquo; image will be used like the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../vs_main.png&#34; alt=&#34;vs_main&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;displayed&lt;/strong&gt;: Internal use only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tab_file_name&lt;/strong&gt;: where the tab file is relative to the &lt;code&gt;R&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;plugin&lt;/strong&gt;: Internal use only&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;add-a-new-custom-tab&#34;&gt;Add a new custom tab&lt;/h2&gt;
&lt;p&gt;SPS provides templates to help developers to create a small SPS tab  that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The main purpose is to generate some plots&lt;/li&gt;
&lt;li&gt;can be loaded into SPS framework easily&lt;/li&gt;
&lt;li&gt;can interact with other SPS tabs (components), like the Canvas tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you initiate a SPS project, an example custom tab is created for you already.
You can find the tab file inside the &lt;code&gt;R&lt;/code&gt; folder of the project root. When you start
the app for the first time, you can easily find it from the left sidebar, or
click on the &amp;ldquo;Custom tabs&amp;rdquo; to go to custom tab main tab.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../new_tab_before.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Example custom tab&lt;/caption&gt;
&lt;/center&gt;
&lt;h3 id=&#34;simple-template&#34;&gt;Simple template&lt;/h3&gt;
&lt;p&gt;Under current SPS version, users are able to add custom tabs with the &lt;code&gt;spsNewTab&lt;/code&gt; function.
This function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;creates the tab file.&lt;/li&gt;
&lt;li&gt;provides a nice template.&lt;/li&gt;
&lt;li&gt;Helps you to register tab information to &lt;code&gt;tabs.csv&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsNewTab(tab_id = &amp;quot;vs_new&amp;quot;, tab_displayname = &amp;quot;New tab demo&amp;quot;, app_path = sps_dir)
## [SPS-INFO] 2021-04-19 23:16:52 Write to file /tmp/RtmpjAYUc0/tab_demo/R/tab_vs_new.R
## [SPS-INFO] 2021-04-19 23:16:52 Now register your new tab to config/tab.csv
## [SPS-SUCCESS] 2021-04-19 23:16:52 New tab created!
## [SPS] 2021-04-19 23:16:52 To load this new tab: `sps(tabs = c(&amp;quot;vs_new&amp;quot;)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are running the code locally, and are using Rstudio, the tab file will be opened
automatically for you.&lt;/p&gt;
&lt;p&gt;In your &lt;code&gt;global.R&lt;/code&gt;, add the new tab to confirm you want to load it, and then restart
you app. Scroll down to the bottom, you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# add &amp;quot;vs_new&amp;quot; in `tabs`
sps_app &amp;lt;- sps(
    tabs = c(&amp;quot;vs_example&amp;quot;, &amp;quot;vs_new&amp;quot;),
    server_expr = {
        msg(&amp;quot;Custom expression runs -- Hello World&amp;quot;, &amp;quot;GREETING&amp;quot;, &amp;quot;green&amp;quot;)
    }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../new_tab_after.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Load new custom tabs&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;By default, it uses the simple template, which contains the &lt;code&gt;spsEzUI&lt;/code&gt; and  &lt;code&gt;spsEzServer&lt;/code&gt; functions.
We have provided commented instructions on how to fill each argument.&lt;/p&gt;
&lt;h4 id=&#34;ui&#34;&gt;UI&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsEzUI(
  desc = &amp;quot;xxx&amp;quot;,
  tab_title = &amp;quot;xxx&amp;quot;,
  plot_title = &amp;quot;xxx&amp;quot;,
  plot_control =  shiny::tagList(
    xxx
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only augment new users need to take some time to learn is adding &lt;code&gt;plot_control&lt;/code&gt;.
Developers need to add some Shiny UI components to let users control how the plotting is
done with interactive options. Basic use can be learned in 5 minutes on
&lt;a href=&#34;https://shiny.rstudio.com/articles/basics.html&#34;&gt;Shiny website{blk}&lt;/a&gt; and &lt;a href=&#34;https://mastering-shiny.org/basic-ui.html&#34;&gt;Shiny book{blk}&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsEzServer(
    plot_code = {
        # data passed from data loading is a reactiveValues object, data stored in `mydata$data`
        plot_data &amp;lt;- mydata$data
        # some validations, make sure users give you the right data format
        spsValidate({
            stopifnot(inherits(plot_data, &amp;quot;data.frame&amp;quot;))                        # require a dataframe
            stopifnot(nrow(plot_data) &amp;gt; 1)                                      # has least one row
            if (!all(c(&amp;quot;Sepal.Length&amp;quot;, &amp;quot;Sepal.Width&amp;quot;) %in% colnames(plot_data)))# has two required columns
                stop(&amp;quot;Require column &#39;Sepal.Length&#39; and &#39;Sepal.Width&#39;&amp;quot;)

            TRUE # give it a TRUE if all checks passed.
            },
            verbose = FALSE # only show messages when fail
        )
        # actual plot code
        ggplot2::ggplot(plot_data) +
            ggplot2::geom_point(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +
            # grab user defined title from plot control by `input$+control_ID`,
            # no need to add `ns()` on server end.
            ggplot2::ggtitle(input$plot_title)
    },
    other_server_code = {}
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the server code, users only need to focus on the plotting code. The only very important thing
developers need to remember is that the plotting data been passed to this function
is stored in a &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.11/reactiveValues.html&#34;&gt;reactiveValues{blk}&lt;/a&gt;
object and it is called &lt;code&gt;mydata$data&lt;/code&gt;. Usually we assign it to a new value so it can
be used easily downstream, like &lt;code&gt;plot_data &amp;lt;- mydata$data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some validation is recommended before reaching the plotting code. You would never know what
kind of dataset users upload. It is always good to check if users&amp;rsquo; uploads meet the
requirements. In SPS you can use the &lt;code&gt;spsValidate&lt;/code&gt; function or use Shiny&amp;rsquo;s default &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.14/validate.html&#34;&gt;validate{blk}&lt;/a&gt;
function (&lt;code&gt;spsValidate&lt;/code&gt; is discussed in &lt;a href=&#34;../../sps/dev/spscomps/server/&#34;&gt;developer tools&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;full-template&#34;&gt;Full template&lt;/h3&gt;
&lt;p&gt;For some developers who already has experience with Shiny, and would like to make more
complex customization, using the full template enables you to change every detail on
the new tab. Simply add the &lt;code&gt;template = &amp;quot;full&amp;quot;&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsNewTab(
  tab_id = &amp;quot;vs_new_full&amp;quot;, 
  tab_displayname = &amp;quot;New tab demo&amp;quot;,
  template = &amp;quot;full&amp;quot;,
  app_path = sps_dir)
## [SPS-INFO] 2021-04-19 23:16:52 Write to file /tmp/RtmpjAYUc0/tab_demo/R/tab_vs_new_full.R
## [SPS-INFO] 2021-04-19 23:16:52 Now register your new tab to config/tab.csv
## [SPS-SUCCESS] 2021-04-19 23:16:52 New tab created!
## [SPS] 2021-04-19 23:16:52 To load this new tab: `sps(tabs = c(&amp;quot;vs_new_full&amp;quot;)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the full template is a lot longer than the simple template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;simple_len &amp;lt;- R.utils::countLines(file.path(sps_dir, &amp;quot;R&amp;quot;, &amp;quot;tab_vs_new.R&amp;quot;))
full_len &amp;lt;- R.utils::countLines(file.path(sps_dir, &amp;quot;R&amp;quot;, &amp;quot;tab_vs_new_full.R&amp;quot;))
spsinfo(glue::glue(&amp;quot;Simple template has {simple_len} lines&amp;quot;), TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-19 23:16:52 Simple template has 66 lines
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsinfo(glue::glue(&amp;quot;Full template has {full_len} lines&amp;quot;), TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-19 23:16:52 Full template has 281 lines
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tab-registeration&#34;&gt;Tab registeration&lt;/h2&gt;
&lt;p&gt;In your &lt;em&gt;global.R&lt;/em&gt;, scroll down to the bottom, you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sps_app &amp;lt;- sps(
    tabs = c(&amp;quot;vs_example&amp;quot;),
    server_expr = {
        msg(&amp;quot;Custom expression runs -- Hello World&amp;quot;, &amp;quot;GREETING&amp;quot;, &amp;quot;green&amp;quot;)
    }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the SPS main function. You can load/unload custom tabs by providing tab IDs in &lt;code&gt;tabs&lt;/code&gt; argument, like
&lt;code&gt;c(&amp;quot;tab1&amp;quot;, &amp;quot;tab2)&lt;/code&gt;. Open &lt;code&gt;config/tabs.csv&lt;/code&gt; or use &lt;code&gt;spsTabInfo()&lt;/code&gt; to see what tabs IDs can be load and other
tab information. Essential framework tabs (&lt;em&gt;core&lt;/em&gt;) and built-in modules (&lt;em&gt;modules&lt;/em&gt;) are loaded automatically. However, you can choose to &lt;a href=&#34;../displaytabs&#34;&gt;unload core and modules tabs&lt;/a&gt;,
and &lt;a href=&#34;../overwritetabs&#34;&gt;overwrite core tabs&lt;/a&gt; by changing some &lt;a href=&#34;../config&#34;&gt;SPS options&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tab-naming&#34;&gt;Tab naming&lt;/h2&gt;
&lt;p&gt;Once a tab ID is provided in the &lt;code&gt;sps&lt;/code&gt; function &lt;code&gt;tabs&lt;/code&gt; argument, when the function
runs, it is looking for tab information inside this &lt;code&gt;tabs.csv&lt;/code&gt;, like the display name
and tab image. Then it will search for the UI and server function in the enviornment.
It is expecting a UI function named &lt;code&gt;tab_id&lt;/code&gt; + &lt;code&gt;UI&lt;/code&gt; -&amp;gt; &lt;code&gt;tab_idUI&lt;/code&gt; and the server
&lt;code&gt;tab_id&lt;/code&gt; + &lt;code&gt;Server&lt;/code&gt; -&amp;gt; &lt;code&gt;tab_idServer&lt;/code&gt;. If you did not use the &lt;code&gt;spsNewTab&lt;/code&gt; function
to generate the new tab, make sure you name your tab UI and server in this pattern.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Overwrite tabs</title>
      <link>/sps/adv_features/overwritetabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/overwritetabs/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;As a framework, default SPS tabs like the &lt;strong&gt;welcome tab&lt;/strong&gt;, the &lt;strong&gt;module main tab&lt;/strong&gt;,
the &lt;strong&gt;visualization main tab&lt;/strong&gt;, the &lt;strong&gt;Canvas tab&lt;/strong&gt; and the &lt;strong&gt;About tab&lt;/strong&gt; can be user-defined.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../default_ui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Default UI and tabs you can overwrite&lt;/caption&gt;
&lt;/center&gt;
&lt;h2 id=&#34;overwrite-sps-default-tabs&#34;&gt;Overwrite SPS default tabs&lt;/h2&gt;
&lt;p&gt;To start create a SPS project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;app_path &amp;lt;- &amp;quot;.&amp;quot;
spsInit(app_path = app_path, overwrite = TRUE, open_files = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-DANGER] 2021-04-22 15:45:11 Done, Db created at &#39;/tmp/Rtmp2YLDmY/overwrite/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-22 15:45:11 Key md5 6886f6bf17229ffb646102abad92fa31
## [SPS-INFO] 2021-04-22 15:45:11 SPS project setup done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;use the function &lt;code&gt;spsCoreTabReplace&lt;/code&gt; to create a template of which tab you would
like to overwrite. Here we use the &amp;ldquo;Welcome&amp;rdquo; tab as example to demo how to write
your own welcome tab.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsCoreTabReplace(replace_tab = &amp;quot;welcome&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SUCCESS] 2021-04-22 15:45:11 File /tmp/Rtmp2YLDmY/overwrite/R/tab_core_welcome.R created
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using Rstudio the template will be opened for you like following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;########################## Overwrite the welcome tab ###########################
## UI
core_welcomeUI &amp;lt;- function(id){
    ns &amp;lt;- NS(id)
    tagList(
        # add your UI code below
    )
}

## server
core_welcomeServer &amp;lt;- function(id, shared){
    module &amp;lt;- function(input, output, session, shared){
        ns &amp;lt;- session$ns
        # add your server code below
    }
    moduleServer(id, module)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can write your own UI and server for this tab, for example, we can add
some UI to the tab:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;core_welcomeUI &amp;lt;- function(id){
    ns &amp;lt;- NS(id)
    tagList(
        # add your UI code below
        h2(&amp;quot;This is my welcome page&amp;quot;),
        h4(&amp;quot;some UI&amp;quot;),
        sliderInput(ns(&amp;quot;num&amp;quot;), &amp;quot;Select a number&amp;quot;, 0, 10, 5)
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you restart the app, you should see your custom Welcome tab:&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../overwrite_tab.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Custom Welcome tab UI&lt;/caption&gt;
&lt;/center&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Toggle tabs</title>
      <link>/sps/adv_features/displaytabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/displaytabs/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;load-and-unload-tabs&#34;&gt;Load and unload tabs&lt;/h2&gt;
&lt;p&gt;In SPS, all tabs including tabs for modules and other default tabs can be
loaded and unloaded. This is controlled by &lt;a href=&#34;../config#app-options&#34;&gt;SPS options&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Under current version, these options are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;module_wf&lt;/td&gt;
&lt;td&gt;load workflow module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module_rnaseq&lt;/td&gt;
&lt;td&gt;load RNAseq module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module_ggplot&lt;/td&gt;
&lt;td&gt;load quick ggplot module?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_welcome&lt;/td&gt;
&lt;td&gt;load welcome tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_vs_main&lt;/td&gt;
&lt;td&gt;load custom visualization main tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_canvas&lt;/td&gt;
&lt;td&gt;load Canvas tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tab_about&lt;/td&gt;
&lt;td&gt;load about tab?&lt;/td&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each of them controls whether to load or unload a tab. By default, all tabs
are loaded, but you can unload them by turn them to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The original UI look like this:&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../sps_default_ui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Default UI&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;To unload some tabs, scroll to the option lines in &lt;strong&gt;&lt;code&gt;global.R&lt;/code&gt;&lt;/strong&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(.list = list(
    ...
    tab_welcome = TRUE,
    tab_vs_main = TRUE,
    tab_canvas = FALSE,
    tab_about = FALSE,
    module_wf = FALSE,
    module_rnaseq = FALSE,
    module_ggplot = TRUE,
    ...
))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We unload the &amp;ldquo;Canvas tab&amp;rdquo;, &amp;ldquo;workflow module tab&amp;rdquo;, &amp;ldquo;RNASeq module tab&amp;rdquo; and
&amp;ldquo;About tab&amp;rdquo;. When you restart the app, you should see some tabs are gone:&lt;/p&gt;
&lt;p&gt;The original UI look like this:&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../sps_unload_tabs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Unload some tabs&lt;/caption&gt;
&lt;/center&gt;
&lt;h3 id=&#34;exception-for-module-main-page&#34;&gt;Exception for module main page&lt;/h3&gt;
&lt;p&gt;You may have noticed, there is no option to unload the &lt;em&gt;module main tab&lt;/em&gt;, which is
named &amp;ldquo;&lt;i class=&#34;fa fa-layer-group&#34;&gt;&lt;/i&gt;Modules&amp;rdquo; on the left sidebar. This is
because this tab is controlled by its sub-tabs, the module tab options. To unload this tab, all
the module tabs have to be unloaded the same time like following. If any module
is loaded, this module main tab cannot be unloaded.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(.list = list(
    ...
    module_wf = FALSE,
    module_rnaseq = FALSE,
    module_ggplot = FALSE,
    ...
))
&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../sps_no_module.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;No module loaded&lt;/caption&gt;
&lt;/center&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Notification system</title>
      <link>/sps/adv_features/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/notification/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;sps-notification-system&#34;&gt;SPS notification system&lt;/h2&gt;
&lt;p&gt;In SPS, there is a notification dropdown where developers can broadcast new messages
to users. The dropdown is located on the top-right corner.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../note_main.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Notification Dropdown&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;When a notification item is clicked, details of the notification will be displayed
in a modal.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../note_view.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Notification Detail Moadal&lt;/caption&gt;
&lt;/center&gt;
&lt;h2 id=&#34;official-notification&#34;&gt;Official notification&lt;/h2&gt;
&lt;p&gt;If you only use the original SPS, we will send out new notifications every time
we update the package or other important things that we want to inform you.
You should see the icon of the dropdown becomes.
&lt;i class=&#34;fa fa-exclamation-triangle&#34;&gt;&lt;/i&gt; + the message number. If there is no
message or you have clicked the dropdown, it will become &lt;i class=&#34;fa fa-check&#34;&gt;&lt;/i&gt; + 0.&lt;/p&gt;
&lt;h2 id=&#34;custom-notification&#34;&gt;Custom notification&lt;/h2&gt;
&lt;p&gt;If you do not want to receive the official notification or want to write your
own note to your users, first let us understand how it works.&lt;/p&gt;
&lt;h3 id=&#34;mechanism&#34;&gt;Mechanism&lt;/h3&gt;
&lt;p&gt;Every time when you run the &lt;code&gt;sps()&lt;/code&gt; main function, it will look for a remote URL
that stores the notification information in &lt;strong&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;yaml{blk}&lt;/a&gt;&lt;/strong&gt; format.
If this file can be successfully parsed, you will see the notification dropdown menu
on SPS UI, otherwise no dropdown displayed.&lt;/p&gt;
&lt;p&gt;To define your own notification URL, you need to change the option &lt;code&gt;note_url&lt;/code&gt; in
the &lt;code&gt;global.R&lt;/code&gt; file. Read more about changing &lt;a href=&#34;../config#app-options&#34;&gt;SPS options&lt;/a&gt;.
The default value is a file on Github, which also can be used as your template to write custom
notification messages:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml&#34;&gt;https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml{blk}&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;notification-template&#34;&gt;Notification template&lt;/h3&gt;
&lt;p&gt;If you download the link above, you should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;############ Create remote messages to notify users in the app #################
## When app starts, it will first try to load this file from online.
## You should place this file somewhere publically reachable online, like Github.
## This file should not be included in your app deployment.
## Add the url of this file to the SPS option `note_url` in &amp;quot;global.R&amp;quot; file

# type: one of &#39;package&#39; or &#39;general&#39;, required
# expire: note will be displayed before the date, required, YYYY-MM-DD format
# title: string, required
# icon: any font-awesome icon name, default is the &amp;quot;info-circle&amp;quot;
# status: one of primary, success, info, warning, danger, default is &amp;quot;primary&amp;quot;
# pkg_name: string, required if type == &#39;package&#39;, such as &amp;quot;systemPipeShiny&amp;quot;
# version: string, required if type == &#39;package&#39;, such as &amp;quot;1.0.0&amp;quot;
# message: string, optional, the text body of the notification. Be careful with indentations.
- note:
    type: general
    pkg_name:
    version:
    title: Notification broadcasting
    expire: 2099-01-01
    icon:
    status:
    message: |
        ## SPS notifications
        What you are looking at is the SPS notification broadcasting system. It
        display messages to your users by reading a remote `yaml` file stored
        online. SPS will fetch the content of this file and translate it to different
        notes you can see here. So you do not need to re-deploy the app every time
        there is a new notification.
        1. You can customize your own notifications by
           using [this file as template](https://raw.githubusercontent.com/systemPipeR/systemPipeShiny/master/inst/remote_resource/notifications.yaml).
        2. After the modification, place this file in public accessible location, like
           Github, do not inlcude this file in app deployment.
        3. During app deployment, indicate the URL of this file in `global.R`
           file, `note_url:` option.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;template-details&#34;&gt;Template details&lt;/h3&gt;
&lt;p&gt;Most entries are easy-to-understand. Here are some key points.&lt;/p&gt;
&lt;h4 id=&#34;indentation&#34;&gt;Indentation&lt;/h4&gt;
&lt;p&gt;Indentation is &lt;strong&gt;very important&lt;/strong&gt; in a yaml file. In the template, we use &lt;strong&gt;4 spaces&lt;/strong&gt;
as 1 level of indentation.&lt;/p&gt;
&lt;h4 id=&#34;notification-start-and-end&#34;&gt;Notification start and end&lt;/h4&gt;
&lt;p&gt;Always start with a &lt;code&gt;- note:&lt;/code&gt; to define a notification item. After you finish typing
the message body, leave at least one line blank before starting another notification.&lt;/p&gt;
&lt;h4 id=&#34;type&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;general&lt;/strong&gt;: Use this type to create a general notification. It will ignore &lt;code&gt;pkg_name&lt;/code&gt;
and &lt;code&gt;version&lt;/code&gt; information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;package&lt;/strong&gt;: A notification that is related to a package updates. This type of note will first
check if the user has installed the package (single one) with  a version that is
higher than the specified version number in
&lt;code&gt;pkg_name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; entries. If so, the notification will &lt;strong&gt;not be displayed&lt;/strong&gt;.
If not the user will see the notification before expiration date.&lt;/p&gt;
&lt;h4 id=&#34;expire&#34;&gt;&lt;code&gt;expire&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;expire&lt;/code&gt; decides how long to show users the notification. If current date has
passed the date in &lt;code&gt;expire&lt;/code&gt;, the notification will not be displayed.&lt;/p&gt;
&lt;h4 id=&#34;message-body&#34;&gt;Message body&lt;/h4&gt;
&lt;p&gt;Use &lt;code&gt;|&lt;/code&gt; to start a new line and put the markdown format text body
in the next indentation level.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: SPS Guide</title>
      <link>/sps/adv_features/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/guide/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;sps-interative-guides-tutorials&#34;&gt;SPS interative guides (tutorials)&lt;/h2&gt;
&lt;p&gt;SPS provides some interactive guides for users to familiarize the app. There is a
very simple one-step welcome guide that will initialize everytime on app start to indicate
where the guide dropdown is (top-right corner).&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../guide_init.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Welcome guide on start&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;By clicking the guide dropdown menu, you can open up the list of available guides.
By default, we only proivde a main SPS guide.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../guide_main.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Guide dropdown menu&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;If any of the guide is clicked in the dropdown, the corresponding interactive guide
will start.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../guide_started.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Guide started&lt;/caption&gt;
&lt;/center&gt;
&lt;p&gt;You can click &amp;ldquo;Next&amp;rdquo;, &amp;ldquo;Previous&amp;rdquo; or &amp;ldquo;Close&amp;rdquo; to navigate the guide or close the guide.&lt;/p&gt;
&lt;h2 id=&#34;custom-guide&#34;&gt;Custom guide&lt;/h2&gt;
&lt;p&gt;To build and provide your custom guides to your users, there is file &lt;code&gt;guide_content.R&lt;/code&gt;
created on SPS project initialization under the &lt;code&gt;R&lt;/code&gt; folder: &lt;code&gt;/R/guide_content.R&lt;/code&gt;.
This is the place to define your own guide.&lt;/p&gt;
&lt;p&gt;This file look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#################### Define your custom SPS tutorials ##########################
# use `shinydashboardPlus::messageItem` to add your tutorials UI to this list
guide_ui &amp;lt;- list(
    ## An example is provided below
    shinydashboardPlus::messageItem(
        inputId = &amp;quot;guide_main&amp;quot;,
        from = &amp;quot;Main Guide&amp;quot;,
        icon = icon(&#39;home&#39;),
        message = &amp;quot;Brief introduction&amp;quot;
    )
)

# use `cicerone::Cicerone$new()` to add your tutorials content to this list
# See help `?cicerone::Cicerone`
# A named list, each item&#39;s name must match the `inputId` in UI to trigger it in app.
guide_content &amp;lt;- try(list(
    ## An example is provided below, replace or add your own to the list
    guide_main = cicerone::Cicerone$new(overlay_click_next = TRUE)$
        step(el = &amp;quot;sidebarItemExpanded&amp;quot;,
             title = &amp;quot;SPS tabs&amp;quot;,
             description = &amp;quot;Browse SPS functionalities as tabs from the left&amp;quot;,
             position = &amp;quot;right-center&amp;quot;)$
        ...
))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two parts that you need to define: UI and actual guide content.&lt;/p&gt;
&lt;h3 id=&#34;ui&#34;&gt;UI&lt;/h3&gt;
&lt;p&gt;UI is what users see inside the dropdown menu. Guides UI needs to be stored in a
&lt;code&gt;list&lt;/code&gt; and each item should be a &lt;code&gt;shinydashboardPlus::messageItem&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inputId&lt;/code&gt; must be unique.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt; is the short description of the guide.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt; should be a call of &lt;code&gt;shiny::icon()&lt;/code&gt;, the icon of the guide in dropdown menu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: short description of the guide in dropdown menu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To add multiple guides&amp;rsquo; UI, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;guide_ui &amp;lt;- list(
    ## An example is provided below
    shinydashboardPlus::messageItem(
        inputId = &amp;quot;guide1&amp;quot;,
        ...
    ),
    shinydashboardPlus::messageItem(
        inputId = &amp;quot;guide2&amp;quot;,
        ...
    ),
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;guide-content&#34;&gt;Guide content&lt;/h3&gt;
&lt;p&gt;The guide content is defined with the {&lt;a href=&#34;https://github.com/JohnCoene/cicerone&#34;&gt;cicerone{blk}&lt;/a&gt;}
package with &lt;code&gt;cicerone::Cicerone&lt;/code&gt; R6 class and also in a &lt;strong&gt;named&lt;/strong&gt; list.&lt;/p&gt;
&lt;p&gt;The name of each item in a list must match the name of &lt;code&gt;inputId&lt;/code&gt; in guide UI.
For example, we have two guides&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;guide_ui &amp;lt;- list(
    ## An example is provided below
    shinydashboardPlus::messageItem(
        inputId = &amp;quot;guide1&amp;quot;,
        ...
    ),
    shinydashboardPlus::messageItem(
        inputId = &amp;quot;guide2&amp;quot;,
        ...
    ),
    ...
)

guide_content &amp;lt;- try(list(
    guide1 = cicerone::Cicerone$new(overlay_click_next = TRUE)$
        ...,
    guide2 = cicerone::Cicerone$new(overlay_click_next = TRUE)$
        ...
))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;ldquo;guide1&amp;rdquo; of &lt;code&gt;inputId&lt;/code&gt; in the &lt;code&gt;guide_ui&lt;/code&gt; must match &amp;ldquo;guide1&amp;rdquo; in &lt;code&gt;guide_content&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;guide2&amp;rdquo; of &lt;code&gt;inputId&lt;/code&gt; in the &lt;code&gt;guide_ui&lt;/code&gt; must match &amp;ldquo;guide2&amp;rdquo; in &lt;code&gt;guide_content&lt;/code&gt; list.&lt;/p&gt;
&lt;h4 id=&#34;define-guide-content&#34;&gt;Define guide content&lt;/h4&gt;
&lt;p&gt;How to define the guide content will not be expanded here, read details in the {&lt;a href=&#34;https://github.com/JohnCoene/cicerone&#34;&gt;cicerone{blk}&lt;/a&gt;} package manual.
Here are some key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;cicerone::Cicerone&lt;/code&gt; is R6 class, and it is obejct oriented, so
you need to use &lt;code&gt;cicerone::Cicerone$new()&lt;/code&gt; method to create a new object before you
can add any guide step.&lt;/li&gt;
&lt;li&gt;R6 methods calling can be chained together, like how to define steps:
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;guide_content &amp;lt;- try(list(
    guide1 = cicerone::Cicerone$new()$ # chain object creation with step defining
        step(...)$                     # chain step1 to step2
        step(...)$                     # step2 to step3
        step(...)$                     # step3 to step4
        step(...)                      # DO NOT use `$` for the last step
))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow the manual of {cicerone} to define steps, the guide will look like this
when users click it.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../cicerone.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;caption&gt;Cicerone steps&lt;/caption&gt;
&lt;/center&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: App security</title>
      <link>/sps/adv_features/app_security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/app_security/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;This secetion discusses how different security concerns are handled in SPS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sps-mode&#34;&gt;SPS mode&lt;/h2&gt;
&lt;p&gt;SPS has an option of &lt;code&gt;mode&lt;/code&gt;. This option controls how the &lt;strong&gt;file upload&lt;/strong&gt; is handled by SPS.
It can be either &amp;ldquo;server&amp;rdquo; or &amp;ldquo;local&amp;rdquo;, which is asking whether you are running
the app on the &amp;ldquo;server&amp;rdquo; or running on your &amp;ldquo;local&amp;rdquo; machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;server&amp;rdquo;: for security, users &lt;strong&gt;do not&lt;/strong&gt; have access of file system on the server,
choose files from users&amp;rsquo; local computer.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;local&amp;rdquo;: Assumes the Shiny server and users&amp;rsquo; local computer is the same machine,
so users &lt;strong&gt;can access&lt;/strong&gt; file Shiny server&amp;rsquo;s file system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is first defined in the &lt;code&gt;global.R&lt;/code&gt; file in a SPS project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(sps = list(
    mode = &amp;quot;local&amp;quot;,
    ...
))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check current setting after the app started for the first time&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;mode&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most affected function is &lt;code&gt;dynamicFile&lt;/code&gt; and its server side function &lt;code&gt;dynamicFileServer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Server:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../server.png&#34; alt=&#34;&#34;&gt;
After clicking the file selection button in SPS, &lt;code&gt;server&lt;/code&gt; mode uses the default
shiny file choose, which users can choose from their local computer. You can see
from the picture above, this is a user operating system built-in file chooser.&lt;/p&gt;
&lt;p&gt;Local:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../local.png&#34; alt=&#34;&#34;&gt;
You can see this is different than the &amp;ldquo;server&amp;rdquo; mode.  &amp;ldquo;Local&amp;rdquo; mode is able to
use the file system of the shiny deploy environment file system, and it is no longer
the users&amp;rsquo; local system.&lt;/p&gt;
&lt;p&gt;This may be confusing for the first time. Remember &amp;ldquo;server&amp;rdquo; and &amp;ldquo;local&amp;rdquo; mean
&lt;strong&gt;where&lt;/strong&gt; you deploy the shiny app, on the &lt;em&gt;server&lt;/em&gt; or run on your &lt;em&gt;local&lt;/em&gt; computer.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;choose file from&lt;/th&gt;
&lt;th&gt;file pointing method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;user local computer&lt;/td&gt;
&lt;td&gt;copy to temp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;the computer where you deploy the app&lt;/td&gt;
&lt;td&gt;direct pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;pro-and-cons-of-modes&#34;&gt;Pro and cons of modes&lt;/h3&gt;
&lt;p&gt;It &lt;strong&gt;does not&lt;/strong&gt; matter if which mode you choose if you run the app &lt;strong&gt;on your own computer&lt;/strong&gt;,
because the deploy server and the user computer are the same.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;However &amp;ldquo;local&amp;rdquo; mode will not copy a file to temp after the file chooser, but directly create a pointer.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Server&amp;rdquo; mode will first upload/copy the file to temp and create a pointer. This
will cause resources waste if you are running the app on your own computer. You
already have the file on your computer but now it gets copied to temp before Shiny
can use it. This will also waste some time to copy the file, especially for large files.&lt;/li&gt;
&lt;li&gt;There is a &lt;strong&gt;limit&lt;/strong&gt; for default Shiny upload size which is 24MB in &amp;ldquo;server&amp;rdquo; mode.&lt;/li&gt;
&lt;li&gt;You can choose files as large as you desire on &amp;ldquo;local&amp;rdquo; mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-security-issue-of-local-mode&#34;&gt;The security issue of local mode&lt;/h3&gt;
&lt;p&gt;There is a security concern of &amp;ldquo;local&amp;rdquo; mode when the app is deployed on a remote
server. &amp;ldquo;local&amp;rdquo; mode enables users to choose files from the remote server, so
there is the risk of file leaking and file damaging.&lt;/p&gt;
&lt;p&gt;We recommend &lt;strong&gt;DO NOT&lt;/strong&gt; use &amp;ldquo;local&amp;rdquo; mode for remote deployment, like &lt;a href=&#34;https://shinyapps.io&#34;&gt;https://shinyapps.io&lt;/a&gt;.
You can turn the option &lt;code&gt;warning_toast = TRUE&lt;/code&gt; on global and testing the app before
deploy. This option will check for security problems and inform you.&lt;/p&gt;
&lt;p&gt;There are cases where you really need users to choose files from the remote
server, like the Workflow module, where all workflow files are stored on the
remote server. Then &lt;strong&gt;use a sandbox or container environment&lt;/strong&gt; to isolate the app,
and also &lt;strong&gt;turn on the login page&lt;/strong&gt; &lt;code&gt;login_screen = TRUE&lt;/code&gt; to limit access will be helpful.&lt;/p&gt;
&lt;h2 id=&#34;warning-toast&#34;&gt;Warning toast&lt;/h2&gt;
&lt;p&gt;Set &lt;code&gt;warning_toast = TRUE&lt;/code&gt; option will check for potential security risks and show
a pop-up message if there is any risk when app starts. This is option is helpful
on pre-deployment testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check if you have changed the default admin page url &amp;ldquo;admin&amp;rdquo;&lt;/li&gt;
&lt;li&gt;check if you have changed the default admin user &amp;ldquo;admin&amp;rdquo;&lt;/li&gt;
&lt;li&gt;check if you have changed the default user &amp;ldquo;user&amp;rdquo;&lt;/li&gt;
&lt;li&gt;check if you are on &amp;ldquo;local&amp;rdquo; mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../warning_toast.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-workflow-module&#34;&gt;The workflow module&lt;/h2&gt;
&lt;p&gt;The workflow module enables users to manage, design, and run workflows directly
from the app and in the final running workflow session, users are allowed to run
arbitrary R code in a Rstudio like console in a child R session.
Running any R code means they can modify your remote system, and use &lt;code&gt;system&lt;/code&gt;
commands.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&#34;https://shinyapps.io&#34;&gt;shinyapps.io&lt;/a&gt;, it runs in a container and it reset itself
once a while, so security is not a big concern, but apparently, shinyapps.io is not a
place you want to deploy heavy data analysis workflows. Most users will deploy
the SPS with workflow modules in other cloud computing sites or their own servers.
For these cases, we recommend you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p class=&#34;text-danger&#34;&gt;Turn on the login to give access to limited people.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p class=&#34;text-danger&#34;&gt;Isolate the app with sandboxes or containers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: SPS database</title>
      <link>/sps/adv_features/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/database/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;SPS database is a small SQLite database which stores some basic app information,
the project encryption key pair, account information. The database is controlled
by 3 SPS R6 classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;spsDb&lt;/strong&gt;: basic database management, queries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spsEncryption&lt;/strong&gt;: Interact with the SHA256 key pair in the database to encrypt
strings, and files. Also methods to view or change the key pair, inherits &lt;code&gt;spsDb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spsAcount&lt;/strong&gt;: use the encyption key pair to manage users and admin accounts in
SPS, inherits &lt;code&gt;spsDb&lt;/code&gt; and &lt;code&gt;spsEncryption&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First to create a SPS project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;app_path &amp;lt;- &amp;quot;.&amp;quot;
spsInit(app_path = app_path, overwrite = TRUE, open_files = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-DANGER] 2021-04-22 15:45:04 Done, Db created at &#39;/tmp/Rtmp3KQ3pG/SPS_20210422/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-22 15:45:04 Key md5 1d1f76c8eecddb382ee2db097d6edbe9
## [SPS-INFO] 2021-04-22 15:45:04 SPS project setup done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see a database created on a SPS project initiation, you should see a message
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[SPS-DANGER] 2021-04-19 11:06:53 Done, Db created at 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can use different class methods to interact with the database.&lt;/p&gt;
&lt;h2 id=&#34;spsdb-class&#34;&gt;&lt;code&gt;spsDb&lt;/code&gt; class&lt;/h2&gt;
&lt;p&gt;Reference manual under &lt;a href=&#34;../../sps/funcs/sps/reference/spsDb.html&#34;&gt;SPS Functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a class object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydb &amp;lt;- spsDb$new()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:04 Created SPS database method container
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-new-db&#34;&gt;create new db&lt;/h3&gt;
&lt;p&gt;If there is no database, we can create one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# delete current one first
try(file.remove(&amp;quot;config/sps.db&amp;quot;))
## [1] TRUE
# create a new one
mydb$createDb()
## [SPS-INFO] 2021-04-22 15:45:04 Creating SPS db...
## [SPS-DANGER] 2021-04-22 15:45:04 Done, Db created at &#39;config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-22 15:45:04 Key md5 6306a50abcf3c7618566911a793b0405
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;text-danger&#34;&gt;If you create a new database, all information in the old database
will be overwritten. All old information will be lost&lt;/p&gt;
&lt;h3 id=&#34;get-tables&#34;&gt;Get tables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# meta info table
mydb$queryValue(&amp;quot;sps_meta&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            info          value
## 1 creation_date 20210422154504
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# raw blob table to store keys
mydb$queryValue(&amp;quot;sps_raw&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   info         value
## 1  key blob[1.36 kB]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# account table
mydb$queryValue(&amp;quot;sps_account&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   account                                                             pass
## 1   admin bef2094c429fa5b0ff7a37abc6bf8dd31c29fa2acd783a2303935d2b8664ea21
## 2    user 12842a62c410af0f4b4dc866283a90f7b7c42c9d5ca0d0e1c812dca11021b052
##    role
## 1 admin
## 2  user
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;insert-new-recordsrows&#34;&gt;Insert new records(rows)&lt;/h3&gt;
&lt;p&gt;To add a new row, values of all columns needs to be passed in a SQL string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydb$queryInsert(&amp;quot;sps_meta&amp;quot;, value = &amp;quot;&#39;new1&#39;, &#39;1&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:04 Inerted 1 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or pass in a vector:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydb$queryInsert(&amp;quot;sps_meta&amp;quot;, value = c(&amp;quot;&#39;new2&#39;&amp;quot;, &amp;quot;&#39;2&#39;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:04 Inerted 1 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# check the new table 
mydb$queryValue(&amp;quot;sps_meta&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            info          value
## 1 creation_date 20210422154504
## 2          new1              1
## 3          new2              2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;change-values&#34;&gt;change values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydb$queryUpdate(&amp;quot;sps_meta&amp;quot;, value = &#39;234&#39;, col = &amp;quot;value&amp;quot;, WHERE = &amp;quot;info = &#39;new1&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:04 Updated 1 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# check the update
mydb$queryValue(&amp;quot;sps_meta&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            info          value
## 1 creation_date 20210422154504
## 2          new1            234
## 3          new2              2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-values&#34;&gt;remove values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mydb$queryDel(&amp;quot;sps_meta&amp;quot;, WHERE = &amp;quot;value = &#39;234&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:05 Deleted 1 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# check again 
mydb$queryValue(&amp;quot;sps_meta&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            info          value
## 1 creation_date 20210422154504
## 2          new2              2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;spsencryption-class&#34;&gt;&lt;code&gt;spsEncryption&lt;/code&gt; class&lt;/h2&gt;
&lt;p&gt;Reference manual under &lt;a href=&#34;../../sps/funcs/sps/reference/spsEncryption.html&#34;&gt;SPS Functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Start by creating a class object&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_ecpt &amp;lt;- spsEncryption$new()
## [SPS-INFO] 2021-04-22 15:45:05 Created SPS encryption method container
## [SPS-INFO] 2021-04-22 15:45:05 Default SPS-db found and is working
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-current-key&#34;&gt;Get current key&lt;/h3&gt;
&lt;p&gt;To see the public and private keys (in {&lt;a href=&#34;https://github.com/jeroen/openssl&#34;&gt;openssil{blk}&lt;/a&gt;} format):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# private
my_ecpt$keyGet()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [2048-bit rsa private key]
## md5: 6306a50abcf3c7618566911a793b0405
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# public
my_ecpt$keyGet()$pubkey
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [2048-bit rsa public key]
## md5: 6306a50abcf3c7618566911a793b0405
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;change-the-encyption-key&#34;&gt;Change the encyption key&lt;/h3&gt;
&lt;p class=&#34;text-danger text-bold&#34; style=&#34;font-weight: 600;&#34;&gt;Be super careful to change the encryption key. This will
result any file encrypted by the old key pair unlockable and the password of all 
current accounts invalid.&lt;/p&gt;
&lt;p&gt;By default it will prevent you to change the key in case you accidentally run this
method&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_ecpt$keyChange()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-DANGER] 2021-04-22 15:45:05 
## change this key will result all accounts&#39; password failed to
## authenticate. You have to regenerate all password for all
## accounts. All encrypted file using the old key will fail to
## decrypt. There is NO way to RECOVER the old key, password
## and files. If you wish to continue, recall this function
## with `confirm = TRUE`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unless you are super sure with a confirmation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_ecpt$keyChange(confirm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-22 15:45:05 md5 42e4b167ba388a9e797608eb4e466a18
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;encrypt-files&#34;&gt;Encrypt files&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# imagine a file has one line &amp;quot;test&amp;quot;
writeLines(text = &amp;quot;test&amp;quot;, con = &amp;quot;test.txt&amp;quot;)
my_ecpt$encrypt(&amp;quot;test.txt&amp;quot;, &amp;quot;test.bin&amp;quot;, overwrite = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;decrypt-files&#34;&gt;Decrypt files&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_ecpt$decrypt(&amp;quot;test.bin&amp;quot;, &amp;quot;test_decpt.txt&amp;quot;, overwrite = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the decrypted file content&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;readLines(&#39;test_decpt.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;spsacount-class&#34;&gt;&lt;code&gt;spsAcount&lt;/code&gt; class&lt;/h2&gt;
&lt;p&gt;This class is discussed in details in the &lt;a href=&#34;../login&#34;&gt;Accounts, login and admin&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Accounts, Login and Admin</title>
      <link>/sps/adv_features/login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/login/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;sps-accounts&#34;&gt;SPS accounts&lt;/h2&gt;
&lt;p&gt;After a SPS project is initialized, some default accounts has been set up. They
will not become useful unless you enable the login and admin features.&lt;/p&gt;
&lt;p&gt;There are 2 default accounts created for you to test before deploy:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;role&lt;/th&gt;
&lt;th&gt;password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The admin account can be used in both the main app login and admin page login, and the user account can only be used for main app login.&lt;/p&gt;
 &lt;p class=&#34;text-danger&#34;&gt;Please change these accounts before deployment.&lt;/p&gt;
&lt;h3 id=&#34;account-management&#34;&gt;Account management&lt;/h3&gt;
&lt;p&gt;You can manage accounts in two ways: commandline and admin page. Here is how you
manage from commandline, read how to do it from &lt;a href=&#34;#admin-page&#34;&gt;admin page below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some helper code inside &lt;code&gt;global.R&lt;/code&gt; file under your SPS project root.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;##  account information
## PLEASE use following to add your own accounts and remove the default accounts for deployment
# mydb &amp;lt;- spsAccount$new()
# mydb$accList()
# mydb$accAdd(acc_name = &amp;quot;XXX&amp;quot;, acc_pass = &amp;quot;$xxxx&amp;quot;, role = &amp;quot;admin&amp;quot;)
# mydb$accRemove(&amp;quot;admin&amp;quot;)
# mydb$accRemove(&amp;quot;user&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can uncomment these lines to practice how to manage accounts, or read the reference manual about &lt;a href=&#34;../../sps/funcs/sps/reference/spsAccount.html&#34;&gt;spsAccount class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First to create a SPS project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;app_path &amp;lt;- &amp;quot;.&amp;quot;
spsInit(app_path = app_path, overwrite = TRUE, open_files = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-16 16:25:15 Start to create a new SPS project
## [SPS-INFO] 2021-04-16 16:25:15 Create project under /tmp/RtmpMoNp2X/SPS_20210416
## [SPS-INFO] 2021-04-16 16:25:15 Now copy files
## [SPS-INFO] 2021-04-16 16:25:15 Create SPS database
## [SPS-INFO] 2021-04-16 16:25:15 Created SPS database method container
## [SPS-INFO] 2021-04-16 16:25:15 Creating SPS db...
## [SPS-DANGER] 2021-04-16 16:25:15 Done, Db created at &#39;/tmp/RtmpMoNp2X/SPS_20210416/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-16 16:25:15 Key md5 db686a4f203edbdd0fe4c2a1642492d2
## [SPS-INFO] 2021-04-16 16:25:15 SPS project setup done!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a &lt;code&gt;spsAccount&lt;/code&gt; object. SPS accounts are stored in the &lt;code&gt;config/sps.db&lt;/code&gt; database inside your SPS projects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc &amp;lt;- spsAccount$new()
## [SPS-INFO] 2021-04-16 16:25:15 Created SPS account method container
## [SPS-INFO] 2021-04-16 16:25:15 Default SPS-db found and is working
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-INFO] 2021-04-16 16:25:15 Creating SPS db...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-DANGER] 2021-04-16 16:25:15 Done, Db created at &#39;config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-16 16:25:15 Key md5 127f00770c4ed318c48fe92cd67bf783
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See what accounts you have&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accList()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   account  role
## 1   admin admin
## 2    user  user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also listed passwords. They are SHA256 encrypted.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble::as_tibble(acc$accList(include_pass = TRUE))
## # A tibble: 2 x 3
##   account pass                                                             role 
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                                                            &amp;lt;chr&amp;gt;
## 1 admin   0b1460498bf1b50e05cc07e53c7856fc23ecd3fc2bc404d52dbf3aae743f8a9a admin
## 2 user    796be5ca7dafddf5e1e7c032fc71386fe16274f63b6068bb2b064d4c9876eaae user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&#34;../database&#34;&gt;SPS database&lt;/a&gt; for encryption key details.&lt;/p&gt;
&lt;p&gt;Add a new user&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accAdd(acc_name = &#39;user2&#39;, acc_pass = &#39;!newuser12345&#39;, role = &amp;quot;user&amp;quot;)
## [SPS-INFO] 2021-04-16 16:25:15 Account user2 created.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change the role of &lt;code&gt;user2&lt;/code&gt; from &amp;ldquo;user&amp;rdquo; to &amp;ldquo;admin&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accRoleChange(acc_name = &amp;quot;user2&amp;quot;, role = &amp;quot;admin&amp;quot;)
## [SPS-INFO] 2021-04-16 16:25:15 Updated 1 rows
## [SPS-INFO] 2021-04-16 16:25:15 Account user2 role changed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remove a user&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accRemove(&amp;quot;user2&amp;quot;)
## [SPS-INFO] 2021-04-16 16:25:15 Deleted 1 rows
## [SPS-INFO] 2021-04-16 16:25:15 Account user2 removed
acc$accList()
##   account  role
## 1   admin admin
## 2    user  user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change password&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accPassChange(acc_name = &amp;quot;user&amp;quot;, , acc_pass = &#39;!newuser54321&#39;)
## [SPS-INFO] 2021-04-16 16:25:15 Updated 1 rows
## [SPS-INFO] 2021-04-16 16:25:15 Account user password created.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Validate password&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accMatch(acc_name = &amp;quot;user&amp;quot;, acc_pass = &#39;!newuser54321&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accMatch(acc_name = &amp;quot;user&amp;quot;, acc_pass = &amp;quot;user&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accMatch(acc_name = &amp;quot;abc&amp;quot;, acc_pass = &amp;quot;123&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Validate password + role&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accMatch(acc_name = &amp;quot;user&amp;quot;, acc_pass = &#39;!newuser54321&#39;, match_role = TRUE, role = &amp;quot;user&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acc$accMatch(acc_name = &amp;quot;user&amp;quot;, acc_pass = &#39;!newuser54321&#39;, match_role = TRUE, role = &amp;quot;admin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;main-app-login&#34;&gt;Main app login&lt;/h2&gt;
&lt;p&gt;After the account has been set up properly, one can try to turn on the login page for the main app. Use  &lt;code&gt;spsOption(&amp;quot;login_screen&amp;quot;, TRUE)&lt;/code&gt; or set &lt;code&gt;login_screen = TRUE&lt;/code&gt; in &lt;strong&gt;&lt;code&gt;global.R&lt;/code&gt;&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;Whether enabling the login screen is fundamentally different how the Shiny app
loads the UI and server code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disabled: loads UI and server on app start&lt;/li&gt;
&lt;li&gt;Enabled: loads login UI and server on start, loads main app UI and server code only when login is successful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One advantage of using the login is the app starting time is fast. On app start,
it only loads the login logic so it saves some time. The heavy part is the main app
logic which will be loaded after a successful login. So the overall loading time is about the
same. The difference is at what time point to load main app. Of course, if the user
fails to login, main app will never be loaded. This can save some resources to
handle unauthorized requests.&lt;/p&gt;
&lt;p class=&#34;text-warning&#34;&gt;This difference may cause some javascript not working 
if you are loading your custom tabs with custom javascript. Set a wait signal in 
your javascript or report an issue to us if you have troubles.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The login screen is also controlled by another setting &lt;code&gt;login_theme&lt;/code&gt;.
By default, if you turn on the &amp;ldquo;login_screen&amp;rdquo;, app will show you a random loading
theme (&lt;code&gt;login_theme = &amp;quot;random&amp;quot;&lt;/code&gt;) before you see the login panel. You can interact
with these themes or change to play with a different theme. Or you can specify
your favorate from &amp;ldquo;vhelix&amp;rdquo; (DNA double helix), &amp;ldquo;hhelix&amp;rdquo; (DNA flow), or &amp;ldquo;biomatrix&amp;rdquo;
(DNA Matrix).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../login_theme.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you are not a fan of these themes, you can use &lt;code&gt;login_theme = &amp;quot;empty&amp;quot;&lt;/code&gt; to directly
go to login panel.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../login_empty.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;h2 id=&#34;admin-page&#34;&gt;Admin page&lt;/h2&gt;
&lt;p&gt;SPS Admin page is panel of tabs to help app managers administrate the app. Under
current version, SPS provides 2 main features: app information/statistics and
account control.&lt;/p&gt;
&lt;h3 id=&#34;admin-login&#34;&gt;Admin login&lt;/h3&gt;
&lt;p&gt;To reach the Admin page, users first need to enable this feature (default is &lt;code&gt;TRUE&lt;/code&gt;)
in SPS options &lt;code&gt;admin_page&lt;/code&gt; use either &lt;code&gt;spsOption(&amp;quot;admin_page&amp;quot;, TRUE)&lt;/code&gt; or set it
in &lt;code&gt;global.R&lt;/code&gt;. Afterwards, users need type in the correct url to find the page.
This can be set with the SPS option &lt;code&gt;admin_url&lt;/code&gt;. Default is &amp;ldquo;admin&amp;rdquo;, &lt;code&gt;admin_url = &amp;quot;admin&amp;quot;&lt;/code&gt;,
&lt;span class=&#34;text-warning&#34;&gt;but for security we recommend you to change it in deployment. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To access it, add &amp;ldquo;?&amp;rdquo; + &amp;ldquo;YOUR_ADMIN_URL&amp;rdquo; to your app url to visit it. For example:&lt;/p&gt;
&lt;p&gt;we have a demo &lt;a href=&#34;https://tgirke.shinyapps.io/systemPipeShiny_loading/&#34;&gt;https://tgirke.shinyapps.io/systemPipeShiny_loading/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;to visit the admin page, then we visit &lt;a href=&#34;https://tgirke.shinyapps.io/systemPipeShiny_loading/?admin&#34;&gt;https://tgirke.shinyapps.io/systemPipeShiny_loading/?admin&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../admin_login.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Admin login page&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;You can use the testing account &amp;ldquo;admin&amp;rdquo; and password &amp;ldquo;admin&amp;rdquo; to login,
&lt;span class=&#34;text-warning&#34;&gt;but for security we strongly recommend you to change it in deployment. &lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;app-information&#34;&gt;App information&lt;/h3&gt;
&lt;p&gt;The first tab of the Admin page is current app and server information, like CPU,
RAM, size, &lt;em&gt;etc&lt;/em&gt;. On this tab, under details, some real-time statistic plots
are rendered. You can interact with these plots to dig for more information.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../admin_tab_info.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Admin page app info&lt;/p&gt;
&lt;/center&gt;
&lt;h3 id=&#34;account-control&#34;&gt;Account control&lt;/h3&gt;
&lt;p&gt;Instead of changing account information from commandline, you can use this tab
to add / remove / change password/ change roles of current app accounts.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../admin_tab_user.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Admin page user control&lt;/p&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;../admin_newuser.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create a new user&lt;/p&gt;
&lt;/center&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Debugging</title>
      <link>/sps/adv_features/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/debug/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;There are some options in SPS that will give you more information and help you on
debugging. They are: &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;traceback&lt;/code&gt;. You can &lt;a href=&#34;../config&#34;&gt;config&lt;/a&gt;
(enable/disable) themin a SPS project&amp;rsquo;s &lt;code&gt;global.R&lt;/code&gt; file, or use
&lt;code&gt;spsOption(&amp;quot;verbose&amp;quot;, TRUE)&lt;/code&gt; and &lt;code&gt;spsOption(&amp;quot;traceback&amp;quot;, TRUE)&lt;/code&gt; to turn on them.&lt;/p&gt;
&lt;p&gt;Some setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(systemPipeShiny))
app_dir &amp;lt;- tempdir()
spsInit(app_path = app_dir, overwrite = TRUE, change_wd = FALSE, open_files = FALSE)
## [SPS-INFO] 2021-04-16 17:46:53 Start to create a new SPS project
## [SPS-INFO] 2021-04-16 17:46:53 Create project under /tmp/RtmpUfKCYR/SPS_20210416
## [SPS-INFO] 2021-04-16 17:46:53 Now copy files
## [SPS-INFO] 2021-04-16 17:46:53 Create SPS database
## [SPS-INFO] 2021-04-16 17:46:53 Created SPS database method container
## [SPS-INFO] 2021-04-16 17:46:53 Creating SPS db...
## [SPS-DANGER] 2021-04-16 17:46:53 Done, Db created at &#39;/tmp/RtmpUfKCYR/SPS_20210416/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-16 17:46:53 Key md5 fc8c85a0e87073328864bd542d740801
## [SPS-INFO] 2021-04-16 17:46:53 SPS project setup done!
app_path &amp;lt;- file.path(app_dir, glue::glue(&amp;quot;SPS_{format(Sys.time(), &#39;%Y%m%d&#39;)}&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;verbose&#34;&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In many SPS functions, there is this argument &lt;code&gt;verbose&lt;/code&gt; and usually default is &lt;code&gt;FALSE&lt;/code&gt;.
It means do not print extra message, keep it clean. You can set in &lt;code&gt;spsOption(&amp;quot;verbose&amp;quot;, TRUE)&lt;/code&gt;
or inside &lt;code&gt;global.R&lt;/code&gt; file to turn on. These are called global settings, and you
can use a local setting to overwrite it (&lt;code&gt;func(..., verbose = TRUE)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use SPS main function &lt;code&gt;sps&lt;/code&gt; for example, without the verbose&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;verbose&amp;quot;, FALSE)
app &amp;lt;- sps(app_path = app_path)
## Warning: 
[SPS-WARNING] 2021-04-16 17:46:53 These plot tabs has no image path:
## &#39;vs_example&#39;
## It is recommended to add an image. It will be used to generate gallery. Now an empty image is used for these tabs&#39; gallery.
## [SPS-INFO] 2021-04-16 17:46:55 App starts ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turn on the verbose:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;verbose&amp;quot;, TRUE)
app &amp;lt;- sps(app_path = app_path)
## [SPS-INFO] 2021-04-16 17:46:55 App has 19 default configs, resolving 19 custom configs
## [SPS-INFO] 2021-04-16 17:46:55 Now check the tab info in tabs.csv
## Warning: 
[SPS-WARNING] 2021-04-16 17:46:55 These plot tabs has no image path:
## &#39;vs_example&#39;
## It is recommended to add an image. It will be used to generate gallery. Now an empty image is used for these tabs&#39; gallery.
## [SPS-INFO] 2021-04-16 17:46:55 tab.csv info check pass
## [SPS-INFO] 2021-04-16 17:46:55 Using default tabs
## [SPS-INFO] 2021-04-16 17:46:55 check guide
## [SPS-INFO] 2021-04-16 17:46:55 Start to generate UI
## [SPS-INFO] 2021-04-16 17:46:55 parse title and logo
## [SPS-INFO] 2021-04-16 17:46:55 resolve default tabs UI
## [SPS-INFO] 2021-04-16 17:46:55 Loading custom tab UI ...
## [SPS-INFO] 2021-04-16 17:46:55 Loading notifications from developer...
## [SPS-INFO] 2021-04-16 17:46:55 Loading guide UI
## [SPS-INFO] 2021-04-16 17:46:55 Create UI header ...
## [SPS-INFO] 2021-04-16 17:46:55 Create UI sidebar menu ...
## [SPS-INFO] 2021-04-16 17:46:55 Create UI tab content ...
## [SPS-INFO] 2021-04-16 17:46:55 Add tab content to body ...
## [SPS-INFO] 2021-04-16 17:46:55 Merge header, menu, body to dashboard ...
## [SPS-INFO] 2021-04-16 17:46:55 Add overlay loading screen, admin panel.
##             Merge everything to app container ...
## [SPS-INFO] 2021-04-16 17:46:55 UI created
## [SPS-INFO] 2021-04-16 17:46:55 Start to create server function
## [SPS-INFO] 2021-04-16 17:46:55 Resolve default tabs server
## [SPS-INFO] 2021-04-16 17:46:55 Load custom tabs servers
## [SPS-INFO] 2021-04-16 17:46:55 Server functions created
## [SPS-INFO] 2021-04-16 17:46:55 App starts ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;exception&#34;&gt;Exception&lt;/h3&gt;
&lt;p&gt;There is one exception which is the &lt;code&gt;spsInit&lt;/code&gt;. It is used to create a SPS project
for you, so it assumes you do not have a SPS project yet and therefore do not have
the chance to reach SPS options. So the &lt;code&gt;verbose&lt;/code&gt; global setting will not work here.
You need to turn it on locally with &lt;code&gt;verbose = TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Compare messages of this with the initial &lt;code&gt;spsInit&lt;/code&gt; creation on top.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsInit(verbose = TRUE, app_path = app_path, overwrite = TRUE, change_wd = FALSE, open_files = FALSE)
## [SPS-INFO] 2021-04-16 17:46:55 Start to create a new SPS project
## [SPS-INFO] 2021-04-16 17:46:55 Create project under /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416
## [SPS-INFO] 2021-04-16 17:46:55 Now copy files
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/www
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/config
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/R
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/data
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/results
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/README.md
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/deploy.R
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/server.R
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/global.R
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/ui.R
## [SPS-INFO] 2021-04-16 17:46:55 File(s) copied for /tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/server.R
## [SPS-INFO] 2021-04-16 17:46:55 Create SPS database
## [SPS-INFO] 2021-04-16 17:46:55 Created SPS database method container
## [SPS-INFO] 2021-04-16 17:46:55 Db connected
## [SPS-INFO] 2021-04-16 17:46:55 Default SPS-db found and is working
## [SPS-INFO] 2021-04-16 17:46:55 Db connected
## [SPS-INFO] 2021-04-16 17:46:55 Creating SPS db...
## [SPS-INFO] 2021-04-16 17:46:55 Db write the meta table
## [SPS-INFO] 2021-04-16 17:46:56 Db write the raw table
## [SPS-INFO] 2021-04-16 17:46:56 Key generated and stored in db
## [SPS-INFO] 2021-04-16 17:46:56 Db create admin account
## [SPS-DANGER] 2021-04-16 17:46:56 Done, Db created at &#39;/tmp/RtmpUfKCYR/SPS_20210416/SPS_20210416/config/sps.db&#39;. DO NOT share this file with others or upload to open access domains.
## [SPS-INFO] 2021-04-16 17:46:56 Key md5 7dca8a45de4d7260f91ddb1a02d0a6bd
## [SPS-INFO] 2021-04-16 17:46:56 SPS project setup done!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;traceback&#34;&gt;&lt;code&gt;traceback&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;When error happens, it will be helpful if we can know where it happened. This option
will give you additional information of which function it happened, the system call
list and error file and line of code if possible.&lt;/p&gt;
&lt;p&gt;This feature is enabled in two functions &lt;code&gt;sps&lt;/code&gt; and &lt;code&gt;shinyCatch&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sps&lt;/code&gt;: Adding tracebacks if there are some errors sourcing helper functions located
in your SPS project under the &lt;code&gt;R&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shinyCatch&lt;/code&gt;: Traceback errors of expressions inside &lt;code&gt;shinyCatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s use &lt;code&gt;shinyCatch&lt;/code&gt; to demo.&lt;/p&gt;
&lt;p&gt;Before adding traceback:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;traceback&amp;quot;, FALSE)
shinyCatch({
  stop(&amp;quot;some error message&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-ERROR] 2021-04-16 17:46:56 some error message
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;traceback&amp;quot;, TRUE)
shinyCatch({
  stop(&amp;quot;some error message&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1. local({
##     if (length(a &amp;lt;- commandArgs(TRUE)) != 2) 
##         stop(&amp;quot;The number of arguments passed to Rscript should be 2.&amp;quot;)
##     x = readRDS(a[1])
##     f = x[[1]]
##     if (is.character(f)) 
##         f = eval(parse(text = f), envir = globalenv())
##     r = do.call(f, x[[2]], envir = globalenv())
##     saveRDS(r, a[2])
## }) 
## 2. eval.parent(substitute(eval(quote(expr), envir))) 
## 3. eval(expr, p) 
## 4. eval(expr, p) 
## 5. eval(quote({
##     if (length(a &amp;lt;- commandArgs(TRUE)) != 2) stop(&amp;quot;The number of arguments passed to Rscript should be 2.&amp;quot;)
##     x = readRDS(a[1])
##     f = x[[1]]
##     if (is.character(f)) f = eval(parse(text = f), envir = globalenv())
##     r = do.call(f, x[[2]], envir = globalenv())
##     saveRDS(r, a[2])
## }), new.env()) 
## 6. eval(quote({
##     if (length(a &amp;lt;- commandArgs(TRUE)) != 2) stop(&amp;quot;The number of arguments passed to Rscript should be 2.&amp;quot;)
##     x = readRDS(a[1])
##     f = x[[1]]
##     if (is.character(f)) f = eval(parse(text = f), envir = globalenv())
##     r = do.call(f, x[[2]], envir = globalenv())
##     saveRDS(r, a[2])
## }), new.env()) 
## 7. do.call(f, x[[2]], envir = globalenv()) 
## 8. (function (input, output, to_md = file_ext(output) != &amp;quot;html&amp;quot;, quiet = TRUE) 
## {
##     options(htmltools.dir.version = FALSE)
##     setwd(dirname(input))
##     input = basename(input)
##     if (to_md) 
##         options(bookdown.output.markdown = TRUE)
##     res = rmarkdown::render(input, &amp;quot;blogdown::html_page&amp;quot;, output_file = output, envir = globalenv(), quiet = quiet, run_pandoc = !to_md, clean = !to_md)
##     x = read_utf8(res)
##     if (to_md) 
##         x = process_markdown(res, x)
##     unlink(res)
##     x
## })(&amp;quot;content/en/sps/adv_features/debug.Rmd&amp;quot;, &amp;quot;debug.md~&amp;quot;, TRUE, TRUE) 
## 9. rmarkdown::render(input, &amp;quot;blogdown::html_page&amp;quot;, output_file = output, envir = globalenv(), quiet = quiet, run_pandoc = !to_md, clean = !to_md) 
## 10. knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet) 
## 11. process_file(text, output) 
## 12. withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), error = function(e) {
##     setwd(wd)
##     cat(res, sep = &amp;quot;\n&amp;quot;, file = output %n% &amp;quot;&amp;quot;)
##     message(&amp;quot;Quitting from lines &amp;quot;, paste(current_lines(i), collapse = &amp;quot;-&amp;quot;), &amp;quot; (&amp;quot;, knit_concord$get(&amp;quot;infile&amp;quot;), &amp;quot;) &amp;quot;)
## }) 
## 13. process_group(group) 
## 14. process_group.block(group) 
## 15. call_block(x) 
## 16. block_exec(params) 
## 17. in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), stop_on_error = if (options$error &amp;amp;&amp;amp; options$include) 0 else 2, output_handler = knit_handlers(options$render, options))) 
## 18. evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), stop_on_error = if (options$error &amp;amp;&amp;amp; options$include) 0 else 2, output_handler = knit_handlers(options$render, options)) 
## 19. evaluate::evaluate(...) 
## 20. evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, debug = debug, last = i == length(out), use_try = stop_on_error != 2, keep_warning = keep_warning, keep_message = keep_message, output_handler = output_handler, include_timing = include_timing) 
## 21. timing_fn(handle(ev &amp;lt;- withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, error = eHandler, message = mHandler))) 
## 22. handle(ev &amp;lt;- withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, error = eHandler, message = mHandler)) 
## 23. withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, error = eHandler, message = mHandler) 
## 24. withVisible(eval(expr, envir, enclos)) 
## 25. eval(expr, envir, enclos) 
## 26. eval(expr, envir, enclos) 
## 27. shinyCatch({
##     stop(&amp;quot;some error message&amp;quot;)
## }) 
## 28. tryCatch(suppressMessages(suppressWarnings(withCallingHandlers(expr, message = function(m) toastr_actions$message(m), warning = function(m) toastr_actions$warning(m), error = function(m) if (trace_back) printTraceback(sys.calls())))), error = function(m) {
##     toastr_actions$error(m)
##     return(NULL)
## }) 
## 29. tryCatchList(expr, classes, parentenv, handlers) 
## 30. tryCatchOne(expr, names, parentenv, handlers[[1]]) 
## 31. doTryCatch(return(expr), name, parentenv, handler) 
## 32. suppressMessages(suppressWarnings(withCallingHandlers(expr, message = function(m) toastr_actions$message(m), warning = function(m) toastr_actions$warning(m), error = function(m) if (trace_back) printTraceback(sys.calls())))) 
## 33. withCallingHandlers(expr, message = function(c) if (inherits(c, classes)) tryInvokeRestart(&amp;quot;muffleMessage&amp;quot;)) 
## 34. suppressWarnings(withCallingHandlers(expr, message = function(m) toastr_actions$message(m), warning = function(m) toastr_actions$warning(m), error = function(m) if (trace_back) printTraceback(sys.calls()))) 
## 35. withCallingHandlers(expr, warning = function(w) if (inherits(w, classes)) tryInvokeRestart(&amp;quot;muffleWarning&amp;quot;)) 
## 36. withCallingHandlers(expr, message = function(m) toastr_actions$message(m), warning = function(m) toastr_actions$warning(m), error = function(m) if (trace_back) printTraceback(sys.calls())) 
## [SPS-ERROR] 2021-04-16 17:46:56 some error message
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or use local setting to overwrite the global, even we have &lt;code&gt;spsOption(&amp;quot;traceback&amp;quot;, TRUE)&lt;/code&gt;,
but traceback is still muted by &lt;code&gt; trace_back = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spsOption(&amp;quot;traceback&amp;quot;, TRUE)
shinyCatch({
  stop(&amp;quot;some error message&amp;quot;)
}, trace_back = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [SPS-ERROR] 2021-04-16 17:46:56 some error message
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;traceback-with-file-and-line-number&#34;&gt;Traceback with file and line number&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s write an R file with functions, source it and then call the function from
this file. Try it on your own computer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;temp_file &amp;lt;- tempfile(fileext = &amp;quot;.R&amp;quot;)
writeLines(
  &amp;quot;myFunc &amp;lt;- function(){
      myFunc2()
  }
  myFunc2 &amp;lt;- function(){
      stop(&#39;some error message&#39;)
  }
  &amp;quot;,
  temp_file
)
source(temp_file)

shinyCatch({
  myFunc()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../shinycatch_traceback.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see the error happened in &lt;code&gt;myFunc&lt;/code&gt; line No. 2 and then inside this function
it calls another function &lt;code&gt;myFunc2&lt;/code&gt; which caused the final error. In &lt;code&gt;myFunc2&lt;/code&gt;
it is also the line No. 2 caused the issue and error is coming from &lt;code&gt;/tmp/...&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;other-shiny-built-in-options&#34;&gt;other Shiny built-in options&lt;/h2&gt;
&lt;p&gt;There are some Shiny options can also be helpful on debugging:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# developer mode, use ?devmode to see details 
devmode(TRUE)
# inspect reactivity in shiny
options(shiny.reactlog = TRUE)
# similar to SPS&#39;s traceback but on the whole app level 
options(shiny.fullstacktrace = TRUE)
# open the `browser` debug mode on error
options(shiny.error = browser)
# when a shiny app file saves, reload the app, not working with modular apps like SPS at this moment
options(shiny.autoreload = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.14/shiny-options.html&#34;&gt;Shiny option website{blk}&lt;/a&gt;
for more details&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Sps: Other customizations</title>
      <link>/sps/adv_features/other_customizations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sps/adv_features/other_customizations/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;title-and-logo&#34;&gt;Title and logo&lt;/h2&gt;
&lt;p&gt;The default for title is &amp;ldquo;systemPipeShiny&amp;rdquo; and default logo is the &amp;ldquo;img/sps_small.png&amp;rdquo;
which is a relative path of the &lt;code&gt;www&lt;/code&gt; folder in your SPS project. You can change
them in &lt;a href=&#34;../config/&#34;&gt;SPS options&lt;/a&gt;. The affected places are:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../custom_title.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
