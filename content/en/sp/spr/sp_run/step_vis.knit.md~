---
title: "Visualize workflows" 
date: "Last update: 01 June, 2022" 
vignette: |
  %\VignetteEncoding{UTF-8}
  %\VignetteIndexEntry{systemPipeR: Workflow design and reporting generation environment}
  %\VignetteEngine{knitr::rmarkdown}
fontsize: 14pt
editor_options: 
  chunk_output_type: console
type: docs
weight: 4
---



```r
suppressPackageStartupMessages({
    library(systemPipeR)
})
```

In the last section, we have learned how to [run/manage workflows](../step_run). 
In this section, we will learn advanced options how to visualize workflows. 


First let's set up the workflow using the example workflow template. For real 
production purposes, we recommend you to check out the complex templates over [here](/spr_wf/).



## dependency graph
The workflow plot is also called the dependency graph. It shows users how 
one step is depend on another. This is very important in SPR. A step will not 
be run unless all dependencies has been executed successfully. 

To understand a workflow, we can simply call the sal object to print on console
like so


```r
sal
## Instance of 'SYSargsList': 
##     WF Steps:
##        1. load_library --> Status: Success
##        2. export_iris --> Status: Success
##        3. gzip --> Status: Success
##            Total Files: 3 | Existing: 3 | Missing: 0
##          3.1. gzip
##              cmdlist: 3 | Success: 3
##        4. gunzip --> Status: Success
##            Total Files: 3 | Existing: 3 | Missing: 0
##          4.1. gunzip
##              cmdlist: 3 | Success: 3
##        5. stats --> Status: Success
```

However, when the workflow becomes very long and complex, the relation between steps are 
hard to see from console. Workflow plot is the useful tool to understand the workflow.

For example, the [VARseq workflow](https://systempipe.org/SPvarseq/articles/SPvarseq.html) 
is pretty complex, we can show it by: 








