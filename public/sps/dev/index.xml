<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysPipe â€“ Developer tools</title><link>/sps/dev/</link><description>Recent content in Developer tools on sysPipe</description><generator>Hugo -- gohugo.io</generator><atom:link href="/sps/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Sps: spsComps</title><link>/sps/dev/spscomps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sps/dev/spscomps/</guid><description>
&lt;h2 id="sps-components-package">SPS Components package&lt;/h2>
&lt;p>systemPipeShiny Components (spsComps) package is a collection of custom UI and
server components that are used in SPS main framework. If you see a component
in SPS but want to outside the SPS framework, like in your own Shiny apps,
take a look at these components.&lt;/p>
&lt;h2 id="demos">Demos&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Demo&lt;/th>
&lt;th>type&lt;/th>
&lt;th>source code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://lezhang.shinyapps.io/spsComps">shiny{blk}&lt;/a>&lt;/td>
&lt;td>shinyapps.io&lt;/td>
&lt;td>&lt;a href="https://github.com/lz100/spsComps/tree/master/examples/demo">Github{blk}&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://systempipe.org/sps/dev/spscomps/ui/">Rmd&lt;/a>&lt;/td>
&lt;td>Rmarkdown rendered&lt;/td>
&lt;td>&lt;a href="https://raw.githubusercontent.com/systemPipeR/systemPipeR.github.io/main/content/en/sps/dev/spscomps/ui.Rmd">Raw{blk}&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;style>
table {font-size: 1.5rem}
&lt;/style>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Read the &lt;a href="..">developer tools&lt;/a> main page, not repeating here.&lt;/p>
&lt;h2 id="category">Category&lt;/h2>
&lt;p>{spsComps} can be divided into two major categories: &lt;a href="ui">UI&lt;/a> and &lt;a href="server">server&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="ui">&lt;strong>UI&lt;/strong>&lt;/a>: Shiny or HTML UI components, for example, a box, a gallery, a button, etc. With
these most of components, you do &lt;strong>NOT need a server&lt;/strong>, so they are compatible with
R markdown documents. See the &lt;a href="ui">UI&lt;/a> page and its source code how we use the
components in a Rmd doucment. However, some UI components has server side functions,
mostly like &lt;code>updateXXX&lt;/code> functions. Mainly these functions are used to update/change the
UI based on user behaviors. It is totally okay to use the UI functions without the
server functions (you will get static UI).&lt;/li>
&lt;li>&lt;a href="server">&lt;strong>server&lt;/strong>&lt;/a>: &lt;strong>can only be run in the Shiny server&lt;/strong>. These functions are designed
to make back-end progress easier, extensions of original shiny Server functions.&lt;/li>
&lt;/ul>
&lt;h2 id="functions-reference-manual">Functions reference manual&lt;/h2>
&lt;p>In documents, we only highlight some important functions. Please read
the &lt;a href="../../sps/sps_funcs">reference manuals&lt;/a> for details of every function.&lt;/p>
&lt;h2 id="some-screenshots-of-spscomps">some screenshots of spsComps&lt;/h2>
&lt;h4 id="animations">Animations&lt;/h4>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/animations.gif?raw=true" alt="animation">&lt;/p>
&lt;h4 id="loaders">Loaders&lt;/h4>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/loader.gif?raw=true" alt="loader">&lt;/p>
&lt;h4 id="buttons">Buttons&lt;/h4>
&lt;h5 id="code-display-button">Code display button&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/display_code.gif?raw=true" alt="display_code">&lt;/p>
&lt;h5 id="go-top-button">Go top button&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/gotop.gif?raw=true" alt="gotop">&lt;/p>
&lt;h5 id="input-buttons">Input buttons&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/buttons.png?raw=true" alt="buttons">&lt;/p>
&lt;h5 id="button-groups">Button groups&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/buttons_tab.png?raw=true" alt="buttons_tab">&lt;/p>
&lt;h5 id="table-of-buttons">Table of buttons&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/buttons_table.png?raw=true" alt="buttons_table">&lt;/p>
&lt;h4 id="gallery">Gallery&lt;/h4>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/gallery.png?raw=true" alt="gallery">&lt;/p>
&lt;h4 id="logos">Logos&lt;/h4>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/logos.png?raw=true" alt="logos">&lt;/p>
&lt;h4 id="progress-tracking">Progress tracking&lt;/h4>
&lt;h5 id="porgress-panel">Porgress panel&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/pg_panel.gif?raw=true" alt="pg_panel">&lt;/p>
&lt;h5 id="timeline">Timeline&lt;/h5>
&lt;p>&lt;img src="https://github.com/systemPipeR/systemPipeR.github.io/blob/main/static/sps/img/spscomps/timeline.gif?raw=true" alt="timeline">&lt;/p></description></item><item><title>Sps: drawer</title><link>/sps/dev/drawer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sps/dev/drawer/</guid><description>
&lt;p>The {drawer} package offers an interactive image editing tool that can be added as part of the
HTML in Shiny, R markdown or any type of HTML document. Often times, plots,
photos are embedded in the web application/file. {drawer} can take screenshots
of these image-like elements, or any part of the HTML document and send to an
image editing space called &amp;ldquo;canvas&amp;rdquo; to allow users immediately edit the
screenshot(s) within the same document. Users can quickly combine, compare
different screenshots, upload their own images and maybe make a scientific figure.&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>{drawer} is built with 99% javascript + HTML + CSS, there is &lt;strong>no need to have a Shiny server&lt;/strong> or any other
types of server in the back-end. That&amp;rsquo;s why you can use it in any HTML document.
&lt;strong>All you need is a modern web browser&lt;/strong>, like Chrome or Firefox (IE will not work).&lt;/li>
&lt;li>Shiny and R markdown compatible.&lt;/li>
&lt;li>Screenshot any element in the page and edit in canvas or download it &lt;em>png&lt;/em> or &lt;em>jpg&lt;/em>&lt;/li>
&lt;li>Drag and upload your own images.&lt;/li>
&lt;/ul>
&lt;p>Drawer UI screenshot
&lt;img src="drawer_demo.png" alt="drawer">&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Read the &lt;a href="..">developer tools&lt;/a> main page, not repeating here.&lt;/p>
&lt;h2 id="functions-reference-manual">Functions reference manual&lt;/h2>
&lt;p>Please read the &lt;a href="../../sps/sps_funcs">reference manuals&lt;/a> for details of every function.&lt;/p>
&lt;h2 id="some-video-demos">Some video demos&lt;/h2>
&lt;h3 id="basic-looking-and-options">Basic looking and options&lt;/h3>
&lt;video width="100%" height="100%" controls>
&lt;source src="basic_and_options.mp4" type="video/mp4">
&lt;/video>
&lt;h3 id="capture">Capture&lt;/h3>
&lt;p>Use the capture buttons to capture plots, images and other elements in the same
document.&lt;/p>
&lt;video width="100%" height="100%" controls>
&lt;source src="capture_plots.mp4" type="video/mp4">
&lt;/video>
&lt;h3 id="add-text">Add text&lt;/h3>
&lt;video width="100%" height="100%" controls>
&lt;source src="add_text.mp4" type="video/mp4">
&lt;/video>
&lt;h3 id="upload-your-own-images">Upload your own images&lt;/h3>
&lt;p>You can upload one or multiple your own images at once.&lt;/p>
&lt;video width="100%" height="100%" controls>
&lt;source src="upload_img.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="browser-support">Browser support&lt;/h2>
&lt;p>{drawer} only works on recent browsers versions, like Chrome, latest Edge, Firefox.
IE is not supported (IE is not my friend). Also, some browser privacy extensions will block javascript
and HTML5 canvas fingerprint. This will cause the screenshot to be blank. {&lt;strong>drawer&lt;/strong>}
does not collect any user information from you.&lt;/p></description></item><item><title>Sps: spsUtil</title><link>/sps/dev/spsutil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sps/dev/spsutil/</guid><description>
&lt;hr>
&lt;p>SPS framework come with a plenty of useful general R utility functions, like
pretty logging, package namespace checking, URL checking, and more.&lt;/p>
&lt;p>Since SPS 1.1, these functions are separated into a supporting package called
&lt;strong>spsUtil&lt;/strong> (systemPipeShiny Utility). You can install it from CRAN.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Read the &lt;a href="..">developer tools&lt;/a> main page, not repeating here.&lt;/p>
&lt;h2 id="functions-reference-manual">Functions reference manual&lt;/h2>
&lt;p>In documents, we only highlight some important functions. Please read
the &lt;a href="../../sps/sps_funcs">reference manuals&lt;/a> for details of every function.&lt;/p>
&lt;h2 id="function-highlights">Function highlights&lt;/h2>
&lt;pre>&lt;code class="language-r">library(spsUtil)
&lt;/code>&lt;/pre>
&lt;h3 id="logging-with-msg">logging with &lt;code>msg&lt;/code>&lt;/h3>
&lt;h4 id="basic">basic&lt;/h4>
&lt;p>Often times in an R function, we want to use some text to inform users the
status and message. We can use functions like &lt;code>message&lt;/code>, &lt;code>warning&lt;/code>, &lt;code>stop&lt;/code> to generate different
levels of information.&lt;/p>
&lt;p>{spsUtil} provides some more informative and prettier ways to generate these kind of messages.&lt;/p>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;my message&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [INFO] 2021-04-12 11:49:35 my message
&lt;/code>&lt;/pre>
&lt;p>You can see it starts with a &lt;code>level&lt;/code> information, then a time stamp, and follows the
actual message. By default, it uses the &lt;code>INFO&lt;/code> level, and you can change to whatever
level you want. However, there are 3 keywords that have special meaning.&lt;/p>
&lt;h4 id="levels">Levels&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>INFO&lt;/strong>: equals &lt;code>message&lt;/code> method in native R&lt;/li>
&lt;li>&lt;strong>WARNING&lt;/strong>: generates warnings the same as &lt;code>warning&lt;/code> function&lt;/li>
&lt;li>&lt;strong>ERROR&lt;/strong>: generates error the same as &lt;code>stop&lt;/code> function and will prevent downstream
code get evaluated.&lt;/li>
&lt;/ul>
&lt;p>If the level is other than these 3, there is no special meaning in R, just &lt;code>cat&lt;/code>
the message out.&lt;/p>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am info&amp;quot;, level = &amp;quot;INFO&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [INFO] 2021-04-12 11:49:35 I am info
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am warning&amp;quot;, level = &amp;quot;warning&amp;quot;) # not case sensitive
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: [WARNING] 2021-04-12 11:49:35 I am warning
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am error&amp;quot;, level = &amp;quot;ERROR&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Error:
[ERROR] 2021-04-12 11:49:35 I am error
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am random level&amp;quot;, level = &amp;quot;MY LEVEL&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [MY LEVEL] 2021-04-12 11:49:35 I am random level
&lt;/code>&lt;/pre>
&lt;h4 id="prefix">Prefix&lt;/h4>
&lt;p>For the 3 key levels, you can specify the prefix in front of the level text to
over write the default level text &lt;code>INFO&lt;/code>, &lt;code>WARNING&lt;/code>, or &lt;code>ERROR&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am info&amp;quot;, level = &amp;quot;INFO&amp;quot;, info_text = &amp;quot;NEW-INFO&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [NEW-INFO] 2021-04-12 11:49:35 I am info
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am warning&amp;quot;, level = &amp;quot;warning&amp;quot;, warning_text = &amp;quot;MY-WARNING&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: [MY-WARNING] 2021-04-12 11:49:35 I am warning
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am error&amp;quot;, level = &amp;quot;ERROR&amp;quot;, error_text = &amp;quot;STOP&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Error:
[STOP] 2021-04-12 11:49:35 I am error
&lt;/code>&lt;/pre>
&lt;h4 id="colors">Colors&lt;/h4>
&lt;p>Colors are automatically enabled if it is supported. If you try all code above in
your terminal or Rstudio, they all have colors. In Rmd, to enable the color,
you need to add the following code chunk. You also need to install the &lt;code>fansi&lt;/code> package.&lt;/p>
&lt;pre>&lt;code>```{r echo=FALSE, results='asis'}
options(crayon.enabled = TRUE)
old_hooks &amp;lt;- fansi::set_knit_hooks(knitr::knit_hooks, which = c(&amp;quot;output&amp;quot;, &amp;quot;message&amp;quot;, &amp;quot;error&amp;quot;, &amp;quot;warning&amp;quot;))
```
&lt;/code>&lt;/pre>
&lt;STYLE type='text/css' scoped>
PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};
&lt;/STYLE>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am info&amp;quot;, level = &amp;quot;INFO&amp;quot;, info_text = &amp;quot;NEW-INFO&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-message">&lt;CODE>## &lt;span style='color: #0000BB;font-weight: bold;'>[NEW-INFO] 2021-04-12 11:49:35 I am info&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>The 3 key levels has default colors:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>INFO&lt;/strong>: &lt;span style="color:blue">blue&lt;/span>&lt;/li>
&lt;li>&lt;strong>WARNING&lt;/strong>: &lt;span style="color:orange">orange&lt;/span>&lt;/li>
&lt;li>&lt;strong>ERROR&lt;/strong>: &lt;span style="color:red">red&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>You can specify colors for your own levels&lt;/p>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am warning&amp;quot;, level = &amp;quot;warning&amp;quot;) ## not super orange in Rmd translation -_-=
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:35 I am warning&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;I am error&amp;quot;, level = &amp;quot;error&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-error">&lt;CODE>## Error:
&lt;span style='color: #BB0000;font-weight: bold;'>[ERROR] 2021-04-12 11:49:35 I am error&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;oh yeah&amp;quot;, level = &amp;quot;SUCCESS&amp;quot;, .other_color = &amp;quot;green&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>## &lt;span style='color: #00BB00;font-weight: bold;'>[SUCCESS] 2021-04-12 11:49:35 oh yeah&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">msg(&amp;quot;oh no&amp;quot;, level = &amp;quot;FAIL&amp;quot;, .other_color = &amp;quot;purple&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-output">&lt;CODE>## &lt;span style='color: #BB00BB;font-weight: bold;'>[FAIL] 2021-04-12 11:49:35 oh no&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;h4 id="wrapper">Wrapper&lt;/h4>
&lt;p>You can use this logging function in your own projects by wrapping it inside a
upper level function, like what we do for &lt;code>spsinfo&lt;/code>, &lt;code>spswarn&lt;/code>, &lt;code>spserror&lt;/code>. They
have &lt;code>SPS-&lt;/code> prefix added, and have some SPS global settings appended.&lt;/p>
&lt;pre>&lt;code class="language-r">spsOption('use_crayon', TRUE)
spsinfo(&amp;quot;info&amp;quot;, verbose = TRUE) ## default `verbose` mute the message
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-message">&lt;CODE>## &lt;span style='color: #0000BB;font-weight: bold;'>[SPS-INFO] 2021-04-12 11:49:35 info&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">spswarn(&amp;quot;warning&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[SPS-WARNING] 2021-04-12 11:49:35 warning&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">spserror(&amp;quot;stop&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-error">&lt;CODE>## Error:
&lt;span style='color: #BB0000;font-weight: bold;'>[SPS-ERROR] 2021-04-12 11:49:35 stop&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;p>To create a simple one for project is very easy. Assume your project is named &amp;ldquo;My Project&amp;rdquo;.
You can create logging as:&lt;/p>
&lt;pre>&lt;code class="language-r">mpInfo &amp;lt;- function(text){
spsUtil::msg(text, info_text = &amp;quot;MP-INFO&amp;quot;)
}
mpWarn &amp;lt;- function(text){
spsUtil::msg(text, level = &amp;quot;warning&amp;quot;, warning_text = &amp;quot;MP-WARNING&amp;quot;)
}
mpErr &amp;lt;- function(text){
spsUtil::msg(text, level = &amp;quot;error&amp;quot;, error_text = &amp;quot;MP-ERROR&amp;quot;)
}
mpInfo(&amp;quot;info&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-message">&lt;CODE>## &lt;span style='color: #0000BB;font-weight: bold;'>[MP-INFO] 2021-04-12 11:49:35 info&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">mpWarn(&amp;quot;warning&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[MP-WARNING] 2021-04-12 11:49:35 warning&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">mpErr(&amp;quot;error&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-error">&lt;CODE>## Error:
&lt;span style='color: #BB0000;font-weight: bold;'>[MP-ERROR] 2021-04-12 11:49:35 error&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;h2 id="mute-message-with-quiet">mute message with &lt;code>quiet&lt;/code>&lt;/h2>
&lt;p>In R, you can easily mute message and warnings with &lt;code>suppressMessages()&lt;/code>, and
&lt;code>suppressWarnings()&lt;/code>, but not so easy with &lt;code>print&lt;/code> or &lt;code>cat&lt;/code> methods. &lt;code>spsUtil::quiet&lt;/code>
enables you to mute all these methods or choose what to mute.&lt;/p>
&lt;pre>&lt;code class="language-r">{
# muted
quiet(warning(123))
quiet(message(123))
quiet(print(123))
quiet(cat(123))
# not muted
quiet(warning(123), warning = FALSE)
quiet(message(123), message = FALSE)
quiet(print(123), print_cat = FALSE)
quiet(cat(123), print_cat = FALSE)
}
## Warning in force(x): 123
## 123
## [1] 123
## 123
&lt;/code>&lt;/pre>
&lt;h2 id="check-empty-values-with-emptyisfalse">check &amp;ldquo;empty&amp;rdquo; values with &lt;code>emptyIsFalse&lt;/code>&lt;/h2>
&lt;p>In R, values like &lt;code>NA&lt;/code>, &lt;code>&amp;quot;&amp;quot;&lt;/code>, &lt;code>NULL&lt;/code>, length(0) is not very meaningful in
condition judgment and will give you errors. Yet, R does not have a native
method to handle these &amp;ldquo;empty&amp;rdquo; values in &lt;code>if&lt;/code> like other languages. They are
meaningful in other ways, but in conditions, we may want to turn them to &lt;code>FALSE&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-r">if(&amp;quot;&amp;quot;) TRUE else FALSE
## Error in if (&amp;quot;&amp;quot;) TRUE else FALSE: argument is not interpretable as logical
if(NULL) TRUE else FALSE
## Error in if (NULL) TRUE else FALSE: argument is of length zero
if(character(0)) TRUE else FALSE
## Error in if (character(0)) TRUE else FALSE: argument is of length zero
if(NA) TRUE else FALSE
## Error in if (NA) TRUE else FALSE: missing value where TRUE/FALSE needed
&lt;/code>&lt;/pre>
&lt;p>You can see they all give errors. In other languages (javascript in this example),
these values are often treated as &lt;code>FALSE&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-js">if (NaN) true; else false
//&amp;gt; false
if (undefined) true; else false
//&amp;gt; false
if (&amp;quot;&amp;quot;) true; else false
//&amp;gt; false
if (null) true; else false
//&amp;gt; false
&lt;/code>&lt;/pre>
&lt;script type="text/javascript">
if (NaN) true; else false
//> false
if (undefined) true; else false
//> false
if ("") true; else false
//> false
if (null) true; else false
//> false
&lt;/script>
&lt;p>This is how &lt;code>emptyIsFalse&lt;/code>
work. If the input is one of these values, return &lt;code>FALSE&lt;/code>, else &lt;code>TRUE&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-r">if(emptyIsFalse(&amp;quot;&amp;quot;)) TRUE else FALSE
## [1] FALSE
if(emptyIsFalse(NULL)) TRUE else FALSE
## [1] FALSE
if(emptyIsFalse(character(0))) TRUE else FALSE
## [1] FALSE
if(emptyIsFalse(NA)) TRUE else FALSE
## [1] FALSE
&lt;/code>&lt;/pre>
&lt;h2 id="check-missing-packages-checknamespace">check missing packages &lt;code>checkNameSpace&lt;/code>&lt;/h2>
&lt;p>In our functions, sometimes we want to have the users to install certain packages
to enable more functionalities, like the &lt;code>DESeq2::lfcShrink&lt;/code> function. Or like
in a Rmd source code, before other people can rerender the document, they must
install certain packages. &lt;code>checkNameSpace&lt;/code> checks all required packages and returns
the missing names.&lt;/p>
&lt;pre>&lt;code class="language-r">checkNameSpace(&amp;quot;random_pkg&amp;quot;)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:35 These packages are missing from
## CRAN: random_pkg&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code>## [1] &amp;quot;random_pkg&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>You can add it to your function to or on the top of your Rmd document to inform
your users the missing packages and where to install.&lt;/p>
&lt;pre>&lt;code class="language-r">pkgs &amp;lt;- list(
CRAN = c(&amp;quot;pkg1&amp;quot;, &amp;quot;pkg2&amp;quot;),
Bioconductor = c(&amp;quot;bio_pkg1&amp;quot;, &amp;quot;bio_pkg2&amp;quot;)
)
missing_pkg &amp;lt;- checkNameSpace(pkgs[[1]], from = names(pkgs)[1])
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:35 These packages are missing from
## CRAN: pkg1,pkg2&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">missing_pkg &amp;lt;- c(missing_pkg, checkNameSpace(pkgs[[2]], from = names(pkgs)[2]))
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:35 These packages are missing from
## Bioconductor: bio_pkg1,bio_pkg2&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>
&lt;pre>&lt;code class="language-r">if(emptyIsFalse(missing_pkg)) stop(&amp;quot;Install packages&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Error in eval(expr, envir, enclos): Install packages
&lt;/code>&lt;/pre>
&lt;p>Or write your custom warning message:&lt;/p>
&lt;pre>&lt;code class="language-r">{
missing_pkg &amp;lt;- mapply(function(pkg, from) {
checkNameSpace(pkg, quietly = TRUE, from)
}, pkg = pkgs, from = names(pkgs), SIMPLIFY = FALSE)
cat(
&amp;quot;Use `install.packages(c('&amp;quot;,
paste0(missing_pkg[['CRAN']], collapse = &amp;quot;','&amp;quot;),
&amp;quot;'))` to install CRAN packages\n&amp;quot;,
sep = &amp;quot;&amp;quot;
)
cat(
&amp;quot;Use `BiocManager::install(c('&amp;quot;,
paste0(missing_pkg[['Bioconductor']], collapse = &amp;quot;','&amp;quot;),
&amp;quot;'))` to install Bioconductor packages\n&amp;quot;,
sep = &amp;quot;&amp;quot;
)
if(emptyIsFalse(unlist(missing_pkg))) stop(&amp;quot;Install packages&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Use `install.packages(c('pkg1','pkg2'))` to install CRAN packages
## Use `BiocManager::install(c('bio_pkg1','bio_pkg2'))` to install Bioconductor packages
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Error in eval(expr, envir, enclos): Install packages
&lt;/code>&lt;/pre>
&lt;h2 id="check-a-url-is-reachable-with-checkurl">check a URL is reachable with &lt;code>checkUrl&lt;/code>&lt;/h2>
&lt;p>Useful if you need make some big HTTP requests.&lt;/p>
&lt;pre>&lt;code class="language-r">checkUrl(&amp;quot;https://google.com&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] TRUE
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">checkUrl(&amp;quot;https://randomwebsite123.com&amp;quot;, timeout = 1)
&lt;/code>&lt;/pre>
&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:37 Bad url https://
## randomwebsite123.com&lt;/span>&lt;span>
&lt;/span>&lt;/CODE>&lt;/PRE>&lt;PRE class="fansi fansi-warning">&lt;CODE>## Warning: &lt;span style='color: #BBBB00;font-weight: bold;'>[WARNING] 2021-04-12 11:49:37 Timeout was reached:
&lt;h2 id="randomwebsite123com-connection-timed-out-after-1001-millisecondsspanspan">[randomwebsite123.com] Connection timed out after 1001 milliseconds&lt;/span>&lt;span>&lt;/h2>
&lt;p>&lt;/span>&lt;/CODE>&lt;/PRE>&lt;/p>
&lt;pre>&lt;code>## [1] FALSE
&lt;/code>&lt;/pre></description></item></channel></rss>