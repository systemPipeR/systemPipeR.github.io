<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysPipe – systemPipeRdata</title><link>/sp/sprdata/</link><description>Recent content in systemPipeRdata on sysPipe</description><generator>Hugo -- gohugo.io</generator><atom:link href="/sp/sprdata/index.xml" rel="self" type="application/rss+xml"/><item><title>Sp: Workflow templates and sample data</title><link>/sp/sprdata/systempiperdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/sprdata/systempiperdata/</guid><description>
&lt;style type="text/css">
pre code {
white-space: pre !important;
overflow-x: scroll !important;
word-break: keep-all !important;
word-wrap: initial !important;
}
&lt;/style>
&lt;!---
- Compile from command-line
Rscript -e "rmarkdown::render('systemPipeRdata.Rmd', c('BiocStyle::html_document'), clean=F); knitr::knit('systemPipeRdata.Rmd', tangle=TRUE)"
-->
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
document.querySelector("h1").className = "title";
});
&lt;/script>
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
var links = document.links;
for (var i = 0, linksLength = links.length; i &lt; linksLength; i++)
if (links[i].hostname != window.location.hostname)
links[i].target = '_blank';
});
&lt;/script>
&lt;p>&lt;strong>Note:&lt;/strong> the most recent version of this vignette can be found &lt;a href="https://github.com/tgirke/systemPipeRdata/blob/master/vignettes/systemPipeRdata.Rmd">here&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> if you use &lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em> or &lt;em>&lt;code>systemPipeRdata&lt;/code>&lt;/em> in published research, please cite:
Backman, T.W.H and Girke, T. (2016). &lt;em>systemPipeR&lt;/em>: Workflow and Report Generation Environment.
&lt;em>BMC Bioinformatics&lt;/em>, 17: 388. &lt;a href="https://doi.org/10.1186/s12859-016-1241-0">10.1186/s12859-016-1241-0&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>&lt;code>systemPipeRdata&lt;/code>&lt;/em> package provides a demo sample FASTQ files used in the
workflow reporting vignettes. The chosen data set &lt;a href="http://www.ncbi.nlm.nih.gov/sra/?term=SRP010938">&lt;code>SRP010938&lt;/code>&lt;/a> obtains 18
paired-end (PE) read sets from &lt;em>Arabidposis thaliana&lt;/em> (Howard et al. 2013). To
minimize processing time during testing, each FASTQ file has been subsetted to
90,000-100,000 randomly sampled PE reads that map to the first 100,000
nucleotides of each chromosome of the &lt;em>A. thalina&lt;/em> genome. The corresponding
reference genome sequence (FASTA) and its GFF annotation files (provided in the
same download) have been truncated accordingly. This way the entire test sample
data set requires less than 200MB disk storage space. A PE read set has been
chosen for this test data set for flexibility, because it can be used for
testing both types of analysis routines requiring either SE (single-end) reads
or PE reads.&lt;/p>
&lt;h1 id="getting-started">Getting started&lt;/h1>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>The &lt;em>&lt;code>systemPipeRdata&lt;/code>&lt;/em> package is available at &lt;a href="http://www.bioconductor.org/packages/release/data/experiment/html/systemPipeRdata.html">Bioconductor&lt;/a> and can be installed from within R as follows:&lt;/p>
&lt;pre>&lt;code class="language-r">if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;systemPipeRdata&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Also, it is possible to install the development version from &lt;a href="http://www.bioconductor.org/packages/devel/data/experiment/html/systemPipeRdata.html">Bioconductor&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-r">BiocManager::install(&amp;quot;systemPipeRdata&amp;quot;, version = &amp;quot;devel&amp;quot;, build_vignettes = TRUE,
dependencies = TRUE) # Installs Devel version from Bioconductor
&lt;/code>&lt;/pre>
&lt;h2 id="loading-package-and-documentation">Loading package and documentation&lt;/h2>
&lt;pre>&lt;code class="language-r">library(&amp;quot;systemPipeRdata&amp;quot;) # Loads the package
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">library(help = &amp;quot;systemPipeRdata&amp;quot;) # Lists package info
vignette(&amp;quot;systemPipeRdata&amp;quot;) # Opens vignette
&lt;/code>&lt;/pre>
&lt;h1 id="starting-with-pre-configured-workflow-templates">Starting with pre-configured workflow templates&lt;/h1>
&lt;p>Load one of the available workflows into your current working directory.
The following does this for the &lt;em>&lt;code>rnaseq&lt;/code>&lt;/em> workflow template. The name of the resulting
workflow directory can be specified under the &lt;em>&lt;code>mydirname&lt;/code>&lt;/em> argument. The default &lt;em>&lt;code>NULL&lt;/code>&lt;/em>
uses the name of the chosen workflow. An error is issued if a directory of the same
name and path exists already.&lt;/p>
&lt;blockquote>
&lt;p>Full details of pre-configed workflows are listed on &lt;a href="../../spr_wf/">this page&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-r">genWorkenvir(workflow = &amp;quot;systemPipeR/SPrnaseq&amp;quot;, mydirname = &amp;quot;rnaseq&amp;quot;)
setwd(&amp;quot;rnaseq&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>On Linux and OS X systems the same can be achieved from the command-line of a terminal with the following commands.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ Rscript -e &amp;quot;systemPipeRdata::genWorkenvir(workflow='systemPipeR/SPrnaseq', mydirname='rnaseq')&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="build-run-and-visualize-the-workflow-template">Build, run and visualize the workflow template&lt;/h2>
&lt;ul>
&lt;li>Build workflow from RMarkdown file&lt;/li>
&lt;/ul>
&lt;p>This template provides some common steps for a &lt;code>RNAseq&lt;/code> workflow. One can add, remove, modify
workflow steps by operating on the &lt;code>sal&lt;/code> object.&lt;/p>
&lt;pre>&lt;code class="language-r">sal &amp;lt;- SPRproject()
sal &amp;lt;- importWF(sal, file_path = &amp;quot;systemPipeVARseq.Rmd&amp;quot;, verbose = FALSE)
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Running workflow&lt;/li>
&lt;/ul>
&lt;p>Next, we can run the entire workflow from R with one command:&lt;/p>
&lt;pre>&lt;code class="language-r">sal &amp;lt;- runWF(sal)
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Visualize workflow&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em> workflows instances can be visualized with the &lt;code>plotWF&lt;/code> function.&lt;/p>
&lt;pre>&lt;code class="language-r">plotWF(sal)
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Report generation&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em> compiles all the workflow execution logs in one central location,
making it easier to check any standard output (&lt;code>stdout&lt;/code>) or standard error
(&lt;code>stderr&lt;/code>) for any command-line tools used on the workflow or the R code stdout.&lt;/p>
&lt;pre>&lt;code class="language-r">sal &amp;lt;- renderLogs(sal)
&lt;/code>&lt;/pre>
&lt;p>Also, the technical report can be generated using &lt;code>renderReport&lt;/code> function.&lt;/p>
&lt;pre>&lt;code class="language-r">sal &amp;lt;- renderReport(sal)
&lt;/code>&lt;/pre>
&lt;h1 id="workflow-templates-collection">Workflow templates collection&lt;/h1>
&lt;p>A collection of workflow templates are available, and it is possible to browse the
current availability, as follows:&lt;/p>
&lt;pre>&lt;code class="language-r">availableWF(github = TRUE)
&lt;/code>&lt;/pre>
&lt;p>This function returns the list of workflow templates available within the package
and &lt;a href="https://github.com/systemPipeR">systemPipeR Organization&lt;/a> on GitHub. Each one
listed template can be created as described above.&lt;/p>
&lt;p>The workflow template choose from Github will be installed as an R package, and
also it creates the environment with all the settings and files to run the demo
analysis.&lt;/p>
&lt;pre>&lt;code class="language-r">genWorkenvir(workflow=&amp;quot;systemPipeR/SPrnaseq&amp;quot;, mydirname=&amp;quot;NULL&amp;quot;)
setwd(&amp;quot;SPrnaseq&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Besides, it is possible to choose different versions of the workflow template,
defined through other branches on the GitHub Repository. By default, the &lt;em>&lt;code>master&lt;/code>&lt;/em>
branch is selected, however, it is possible to define a different branch with the &lt;em>&lt;code>ref&lt;/code>&lt;/em> argument.&lt;/p>
&lt;pre>&lt;code class="language-r">genWorkenvir(workflow=&amp;quot;systemPipeR/SPrnaseq&amp;quot;, ref = &amp;quot;singleMachine&amp;quot;)
setwd(&amp;quot;SPrnaseq&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h2 id="download-a-specific-r-markdown-file">Download a specific R Markdown file&lt;/h2>
&lt;p>Also, it is possible to download a specific workflow script for your analysis.
The URL can be specified under &lt;em>&lt;code>url&lt;/code>&lt;/em> argument and the R Markdown file name in
the &lt;em>&lt;code>urlname&lt;/code>&lt;/em> argument. The default &lt;em>&lt;code>NULL&lt;/code>&lt;/em> copies the current version available in the chose template.&lt;/p>
&lt;pre>&lt;code class="language-r">genWorkenvir(workflow=&amp;quot;systemPipeR/SPrnaseq&amp;quot;, url = &amp;quot;https://raw.githubusercontent.com/systemPipeR/systemPipeRNAseq/cluster/vignettes/systemPipeRNAseq.Rmd&amp;quot;,
urlname = &amp;quot;rnaseq_V-cluster.Rmd&amp;quot;)
setwd(&amp;quot;rnaseq&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h1 id="dynamic-generation-of-workflow-template">Dynamic generation of workflow template&lt;/h1>
&lt;p>It is possible to create a new workflow structure from RStudio
menu &lt;code>File -&amp;gt; New File -&amp;gt; R Markdown -&amp;gt; From Template -&amp;gt; systemPipeR New WorkFlow&lt;/code>.
This interactive option creates the same environment as demonstrated above.&lt;/p>
&lt;p>&lt;img src="results/rstudio.png" alt="">
&lt;strong>Figure 1:&lt;/strong> Selecting workflow template within RStudio.&lt;/p>
&lt;h1 id="directory-structure">Directory Structure&lt;/h1>
&lt;p>The workflow templates generated by &lt;em>&lt;code>genWorkenvir&lt;/code>&lt;/em> contain the following preconfigured directory structure:&lt;/p>
&lt;ul>
&lt;li>&lt;span style="color:green">&lt;em>&lt;strong>workflow/&lt;/strong>&lt;/em>&lt;/span> (&lt;em>e.g.&lt;/em> &lt;em>rnaseq/&lt;/em>)
&lt;ul>
&lt;li>This is the root directory of the R session running the workflow.&lt;/li>
&lt;li>Run script ( &lt;em>*.Rmd&lt;/em>) and sample annotation (&lt;em>targets.txt&lt;/em>) files are located here.&lt;/li>
&lt;li>Note, this directory can have any name (&lt;em>e.g.&lt;/em> &lt;span style="color:green">&lt;em>&lt;strong>rnaseq&lt;/strong>&lt;/em>&lt;/span>, &lt;span style="color:green">&lt;em>&lt;strong>varseq&lt;/strong>&lt;/em>&lt;/span>). Changing its name does not require any modifications in the run script(s).&lt;/li>
&lt;li>&lt;strong>Important subdirectories&lt;/strong>:
&lt;ul>
&lt;li>&lt;span style="color:green">&lt;em>&lt;strong>param/&lt;/strong>&lt;/em>&lt;/span>
&lt;ul>
&lt;li>Stores non-CWL parameter files such as: &lt;em>*.param&lt;/em>, &lt;em>*.tmpl&lt;/em> and &lt;em>*.run.sh&lt;/em>. These files are only required for backwards compatibility to run old workflows using the previous custom command-line interface.&lt;/li>
&lt;li>&lt;span style="color:green">&lt;em>&lt;strong>param/cwl/&lt;/strong>&lt;/em>&lt;/span>: This subdirectory stores all the CWL parameter files. To organize workflows, each can have its own subdirectory, where all &lt;code>CWL param&lt;/code> and &lt;code>input.yml&lt;/code> files need to be in the same subdirectory.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;span style="color:green">&lt;em>&lt;strong>data/&lt;/strong>&lt;/em> &lt;/span>
&lt;ul>
&lt;li>FASTQ files&lt;/li>
&lt;li>FASTA file of reference (&lt;em>e.g.&lt;/em> reference genome)&lt;/li>
&lt;li>Annotation files&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;span style="color:green">&lt;em>&lt;strong>results/&lt;/strong>&lt;/em>&lt;/span>
&lt;ul>
&lt;li>Analysis results are usually written to this directory, including: alignment, variant and peak files (BAM, VCF, BED); tabular result files; and image/plot files&lt;/li>
&lt;li>Note, the user has the option to organize results files for a given sample and analysis step in a separate subdirectory.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: Directory names are indicated in &lt;span style="color:grey">&lt;em>&lt;strong>green&lt;/strong>&lt;/em>&lt;/span>.
Users can change this structure as needed, but need to adjust the code in their workflows
accordingly.&lt;/p>
&lt;center>
&lt;img src="results/directory.png">
&lt;/center>
&lt;p>&lt;strong>Figure 2:&lt;/strong> &lt;em>systemPipeR’s&lt;/em> preconfigured directory structure.&lt;/p>
&lt;h2 id="return-paths-to-sample-data">Return paths to sample data&lt;/h2>
&lt;p>The location of the sample data provided by &lt;em>&lt;code>systemPipeRdata&lt;/code>&lt;/em> can be returned as a &lt;em>&lt;code>list&lt;/code>&lt;/em>.&lt;/p>
&lt;pre>&lt;code class="language-r">pathList()[1:2]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $targets
## [1] &amp;quot;C:/Users/lz/AppData/Local/R/win-library/4.2/systemPipeRdata/extdata/param/targets.txt&amp;quot;
##
## $targetsPE
## [1] &amp;quot;C:/Users/lz/AppData/Local/R/win-library/4.2/systemPipeRdata/extdata/param/targetsPE.txt&amp;quot;
&lt;/code>&lt;/pre>
&lt;h1 id="version-information">Version information&lt;/h1>
&lt;pre>&lt;code class="language-r">sessionInfo()
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## R version 4.2.0 (2022-04-22 ucrt)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 19044)
##
## Matrix products: default
##
## locale:
## [1] LC_COLLATE=English_United States.utf8
## [2] LC_CTYPE=English_United States.utf8
## [3] LC_MONETARY=English_United States.utf8
## [4] LC_NUMERIC=C
## [5] LC_TIME=English_United States.utf8
##
## attached base packages:
## [1] stats graphics grDevices utils datasets
## [6] methods base
##
## other attached packages:
## [1] systemPipeRdata_2.1.1 BiocStyle_2.24.0
##
## loaded via a namespace (and not attached):
## [1] bslib_0.3.1 compiler_4.2.0
## [3] BiocManager_1.30.18 formatR_1.12
## [5] jquerylib_0.1.4 GenomeInfoDb_1.32.1
## [7] XVector_0.36.0 bitops_1.0-7
## [9] remotes_2.4.2 tools_4.2.0
## [11] zlibbioc_1.42.0 digest_0.6.29
## [13] jsonlite_1.8.0 evaluate_0.15
## [15] rlang_1.0.2 cli_3.3.0
## [17] rstudioapi_0.13 yaml_2.3.5
## [19] blogdown_1.10.1 xfun_0.31
## [21] fastmap_1.1.0 GenomeInfoDbData_1.2.8
## [23] stringr_1.4.0 knitr_1.39
## [25] Biostrings_2.64.0 sass_0.4.1
## [27] S4Vectors_0.34.0 IRanges_2.30.0
## [29] stats4_4.2.0 R6_2.5.1
## [31] rmarkdown_2.14 bookdown_0.26
## [33] magrittr_2.0.3 codetools_0.2-18
## [35] htmltools_0.5.2 BiocGenerics_0.42.0
## [37] stringi_1.7.6 RCurl_1.98-1.6
## [39] crayon_1.5.1
&lt;/code>&lt;/pre>
&lt;h1 id="funding">Funding&lt;/h1>
&lt;p>This project was supported by funds from the National Institutes of Health (NIH) and the National Science Foundation (NSF).&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;div id="refs" class="references csl-bib-body hanging-indent">
&lt;div id="ref-Howard2013-fq" class="csl-entry">
&lt;p>Howard, Brian E, Qiwen Hu, Ahmet Can Babaoglu, Manan Chandra, Monica Borghi, Xiaoping Tan, Luyan He, et al. 2013. “High-Throughput RNA Sequencing of Pseudomonas-Infected Arabidopsis Reveals Hidden Transcriptome Complexity and Novel Splice Variants.” &lt;em>PLoS One&lt;/em> 8 (10): e74183. &lt;a href="https://doi.org/10.1371/journal.pone.0074183">https://doi.org/10.1371/journal.pone.0074183&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Sp: Rules to create a new Workflow Template</title><link>/sp/sprdata/newwf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/sprdata/newwf/</guid><description>
&lt;h1 id="how-to-create-a-new-workflow-template">How to create a new Workflow Template&lt;/h1>
&lt;p>&lt;code>SPRthis&lt;/code> package expand &lt;a href="https://github.com/r-lib/usethis">usethis&lt;/a> package, providing automation to create &lt;a href="https://github.com/tgirke/systemPipeR">systemPipeR&lt;/a> workflows templates.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>To install &lt;code>SPRthis&lt;/code> using from &lt;code>BiocManager&lt;/code> the following code:&lt;/p>
&lt;pre>&lt;code class="language-r">if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE)) {
install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;dcassol/SPRthis&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h2 id="quick-start-to-using-to-sprthis">Quick start to using to &lt;code>SPRthis&lt;/code>&lt;/h2>
&lt;pre>&lt;code class="language-r">## Load the package
library(SPRthis)
## create Package
sprthis(wfName=&amp;quot;SPRtest&amp;quot;, analysis=&amp;quot;SPRtest&amp;quot;, path=tempdir())
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## ✔ Creating '/tmp/RtmpUJVdef/SPRtest/'
## ✔ Setting active project to '/tmp/RtmpUJVdef/SPRtest'
## ✔ Creating 'R/'
## ✔ Writing 'DESCRIPTION'
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Package: SPRtest
## Title: SPRtest
## Version: 0.99.0
## Date: 2022-04-29
## Authors@R (parsed):
## * First Last &amp;lt;first.last@example.com&amp;gt; [aut, cre] (YOUR-ORCID-ID)
## Description: This package provides a pre-configured workflow and reporting
## template for SPRtest.
## License: Artistic-2.0
## URL: https://github.com/systemPipeR/SPRtest
## Imports:
## systemPipeR (&amp;gt;= 1.25.0)
## Suggests:
## BiocStyle,
## knitr,
## rmarkdown
## VignetteBuilder:
## knitr
## biocViews: Infrastructure, ...
## Encoding: UTF-8
## Roxygen: list(markdown = TRUE)
## RoxygenNote: 7.1.2
## SystemRequirements: SPRtest can be used to run external command-line
## software, but the corresponding tool needs to be installed on a
## system.
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## ✔ Writing 'NAMESPACE'
## ✔ Setting active project to '&amp;lt;no active project&amp;gt;'
## ✔ Setting active project to '/tmp/RtmpUJVdef/SPRtest'
## ✔ Adding 'testthat' to Suggests field in DESCRIPTION
## ✔ Setting Config/testthat/edition field in DESCRIPTION to '3'
## ✔ Creating 'tests/testthat/'
## ✔ Writing 'tests/testthat.R'
## ✔ Writing 'tests/testthat/test-SPRtest.R'
## • Edit 'tests/testthat/test-SPRtest.R'
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] &amp;quot;/tmp/RtmpUJVdef/SPRtest&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>
SPRtest/
├── DESCRIPTION
├── NAMESPACE
├── README.md
├── SPRtest.Rproj
├── .gitignore
├── .Rbuildignore
├── .Rproj.user/
├── R/
│ ├── functions.R
├── vignettes
│ ├── bibtex.bib
│ ├── SPRtest.Rmd
└── inst
├── rmarkdown
│ └── templates
│ └── SPRtest
│ ├── template.yml
│ └── skeleton
│ ├── batchtools.slurm.tmpl
│ ├── .batchtools.conf.R
│ ├── bibtex.bib
│ ├── NEWS
│ ├── SPRconfig.yml
│ ├── skeleton.Rmd
│ ├── targetsPE.txt
│ ├── data/
│ ├── param/
│ └── results/
&lt;/pre>
&lt;h1 id="help-functions-to-create-the-package">Help functions to create the package&lt;/h1>
&lt;h2 id="create-the-webiste-for-the-package-with-pkgdown">Create the webiste for the package with &lt;code>pkgdown&lt;/code>&lt;/h2>
&lt;p>Edit the &lt;code>_pkgdown.yml&lt;/code> file and run:&lt;/p>
&lt;pre>&lt;code class="language-r">pkgdown::build_site()
&lt;/code>&lt;/pre>
&lt;h2 id="documentation-with-roxygen2">Documentation with &lt;code>roxygen2&lt;/code>&lt;/h2>
&lt;pre>&lt;code class="language-r">roxygen2::roxygenise()
&lt;/code>&lt;/pre>
&lt;h2 id="testing-the-code-with-testthat">Testing the code with &lt;code>testthat&lt;/code>&lt;/h2>
&lt;p>To test the code, you can run&lt;/p>
&lt;pre>&lt;code class="language-r">devtools::test()
&lt;/code>&lt;/pre>
&lt;h1 id="update-r-markdown-template-on-skeleton">Update R Markdown template on &lt;code>skeleton&lt;/code>&lt;/h1>
&lt;pre>&lt;code class="language-r">path &amp;lt;- file.path(&amp;quot;vignettes/SPRtest.Rmd&amp;quot;)
skeleton_update(path)
&lt;/code>&lt;/pre>
&lt;h1 id="package-available-to-genworkenvir-function">Package available to &lt;code>genWorkenvir&lt;/code> Function&lt;/h1>
&lt;p>After creating the new repository on GitHub &lt;a href="https://github.com/systemPipeR">systemPipeR Organization&lt;/a>,
please follow:&lt;/p>
&lt;ul>
&lt;li>Rules:
&lt;ul>
&lt;li>The Workflow Template need to be available under &lt;a href="https://github.com/systemPipeR/">systemPipeR Organization&lt;/a>;&lt;/li>
&lt;li>The repository needs to be &lt;code>public&lt;/code>;&lt;/li>
&lt;li>About setting:
&lt;ul>
&lt;li>&lt;code>Description&lt;/code>: keywords in the description are required: &amp;ldquo;Workflow Template&amp;rdquo;;&lt;/li>
&lt;li>&lt;code>Topics&lt;/code>: we expected &amp;ldquo;systempiper&amp;rdquo; and &amp;ldquo;release&amp;rdquo; or &amp;ldquo;development&amp;rdquo; words on Topics section;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Branch name: To make simple, please name the branch as &amp;ldquo;master&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="check-availability-of-workflow-templates">Check availability of workflow templates&lt;/h2>
&lt;p>A collection of workflow templates are available, and it is possible to browse the
current availability, as follows:&lt;/p>
&lt;pre>&lt;code class="language-r">systemPipeRdata::availableWF(github = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $systemPipeRdata
## [1] &amp;quot;chipseq&amp;quot; &amp;quot;new&amp;quot; &amp;quot;riboseq&amp;quot; &amp;quot;rnaseq&amp;quot; &amp;quot;varseq&amp;quot;
##
## $github
## workflow branches version
## 1 systemPipeR/SPchipseq master release
## 2 systemPipeR/SPriboseq master release
## 3 systemPipeR/SPrnaseq cluster, master, singleMachine release
## 4 systemPipeR/SPvarseq master release
## 5 systemPipeR/SPatacseq master devel
## 6 systemPipeR/SPblast master devel
## 7 systemPipeR/SPclipseq master devel
## 8 systemPipeR/SPdenovo master devel
## 9 systemPipeR/SPhic master devel
## 10 systemPipeR/SPmetatrans master devel
## 11 systemPipeR/SPmethylseq master devel
## 12 systemPipeR/SPmirnaseq master devel
## 13 systemPipeR/SPpolyriboseq master devel
## 14 systemPipeR/SPscrnaseq master devel
## html description
## 1 https://github.com/systemPipeR/SPchipseq Workflow Template
## 2 https://github.com/systemPipeR/SPriboseq Workflow Template
## 3 https://github.com/systemPipeR/SPrnaseq Workflow Template
## 4 https://github.com/systemPipeR/SPvarseq Workflow Template
## 5 https://github.com/systemPipeR/SPatacseq Workflow Template
## 6 https://github.com/systemPipeR/SPblast Workflow Template
## 7 https://github.com/systemPipeR/SPclipseq Workflow Template
## 8 https://github.com/systemPipeR/SPdenovo Workflow Template
## 9 https://github.com/systemPipeR/SPhic Workflow Template
## 10 https://github.com/systemPipeR/SPmetatrans Workflow Template
## 11 https://github.com/systemPipeR/SPmethylseq Workflow Template
## 12 https://github.com/systemPipeR/SPmirnaseq Workflow Template
## 13 https://github.com/systemPipeR/SPpolyriboseq Workflow Template
## 14 https://github.com/systemPipeR/SPscrnaseq Workflow Template
&lt;/code>&lt;/pre>
&lt;p>This function returns the list of workflow templates available within the package
and &lt;a href="https://github.com/systemPipeR">systemPipeR Project Organization&lt;/a> on GitHub. Each one
listed template can be created as described above.&lt;/p></description></item></channel></rss>