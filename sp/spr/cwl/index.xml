<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysPipe – CWL</title><link>/sp/spr/cwl/</link><description>Recent content in CWL on sysPipe</description><generator>Hugo -- gohugo.io</generator><atom:link href="/sp/spr/cwl/index.xml" rel="self" type="application/rss+xml"/><item><title>Sp: CWL syntax</title><link>/sp/spr/cwl/cwl_syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/spr/cwl/cwl_syntax/</guid><description>
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
document.querySelector("h1").className = "title";
});
&lt;/script>
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
var links = document.links;
for (var i = 0, linksLength = links.length; i &lt; linksLength; i++)
if (links[i].hostname != window.location.hostname)
links[i].target = '_blank';
});
&lt;/script>
&lt;p>For complete documentation, please check the CommandLineTools documentation &lt;a href="https://www.commonwl.org/v1.2/CommandLineTool.html">here&lt;/a>
and &lt;a href="https://www.commonwl.org/v1.2/Workflow.html">here&lt;/a> for Workflows and the user guide &lt;a href="https://www.commonwl.org/user_guide/">here&lt;/a>.
CWL command-line specifications are written in &lt;a href="http://yaml.org/">YAML&lt;/a> format.&lt;/p>
&lt;p>In CWL, files with the extension &lt;code>.cwl&lt;/code> define the parameters of a chosen
command-line step or workflow, while files with the extension &lt;code>.yml&lt;/code> define
the input variables of command-line steps.&lt;/p>
&lt;h3 id="cwl-commandlinetool">CWL &lt;code>CommandLineTool&lt;/code>&lt;/h3>
&lt;p>&lt;code>CommandLineTool&lt;/code> by CWL definition is a standalone process, with no interaction
if other programs, execute a program, and produce output.&lt;/p>
&lt;p>Let&amp;rsquo;s explore the &lt;code>*.cwl&lt;/code> file:&lt;/p>
&lt;pre>&lt;code class="language-r">dir_path &amp;lt;- system.file(&amp;quot;extdata/cwl&amp;quot;, package = &amp;quot;systemPipeR&amp;quot;)
cwl &amp;lt;- yaml::read_yaml(file.path(dir_path, &amp;quot;example/example.cwl&amp;quot;))
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>cwlVersion&lt;/code> component shows the CWL specification version used by the document.&lt;/li>
&lt;li>The &lt;code>class&lt;/code> component shows this document describes a &lt;code>CommandLineTool.&lt;/code>
Note that CWL has another &lt;code>class&lt;/code>, called &lt;code>Workflow&lt;/code> which represents a union of one
or more command-line tools together.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl[1:2]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $cwlVersion
## [1] &amp;quot;v1.0&amp;quot;
##
## $class
## [1] &amp;quot;CommandLineTool&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>baseCommand&lt;/code> component provides the name of the software that we desire to execute.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl[3]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $baseCommand
## [1] &amp;quot;echo&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>inputs&lt;/code> section provides the input information to run the tool. Important
components of this section are:
&lt;ul>
&lt;li>&lt;code>id&lt;/code>: each input has an id describing the input name;&lt;/li>
&lt;li>&lt;code>type&lt;/code>: describe the type of input value (string, int, long, float, double,
File, Directory or Any);&lt;/li>
&lt;li>&lt;code>inputBinding&lt;/code>: It is optional. This component indicates if the input
parameter should appear on the command-line. If this component is missing
when describing an input parameter, it will not appear in the command-line
but can be used to build the command-line.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl[4]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $inputs
## $inputs$message
## $inputs$message$type
## [1] &amp;quot;string&amp;quot;
##
## $inputs$message$inputBinding
## $inputs$message$inputBinding$position
## [1] 1
##
##
##
## $inputs$SampleName
## $inputs$SampleName$type
## [1] &amp;quot;string&amp;quot;
##
##
## $inputs$results_path
## $inputs$results_path$type
## [1] &amp;quot;Directory&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>outputs&lt;/code> section should provide a list of the expected outputs after running the command-line tools. Important
components of this section are:
&lt;ul>
&lt;li>&lt;code>id&lt;/code>: each input has an id describing the output name;&lt;/li>
&lt;li>&lt;code>type&lt;/code>: describe the type of output value (string, int, long, float, double,
File, Directory, Any or &lt;code>stdout&lt;/code>);&lt;/li>
&lt;li>&lt;code>outputBinding&lt;/code>: This component defines how to set the outputs values. The &lt;code>glob&lt;/code> component will define the name of the output value.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl[5]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $outputs
## $outputs$string
## $outputs$string$type
## [1] &amp;quot;stdout&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>stdout&lt;/code>: component to specify a &lt;code>filename&lt;/code> to capture standard output.
Note here we are using a syntax that takes advantage of the inputs section,
using results_path parameter and also the &lt;code>SampleName&lt;/code> to construct the output &lt;code>filename.&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl[6]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $stdout
## [1] &amp;quot;$(inputs.results_path.basename)/$(inputs.SampleName).txt&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="cwl-workflow">CWL &lt;code>Workflow&lt;/code>&lt;/h3>
&lt;p>&lt;code>Workflow&lt;/code> class in CWL is defined by multiple process steps, where can have
interdependencies between the steps, and the output for one step can be used as
input in the further steps.&lt;/p>
&lt;pre>&lt;code class="language-r">cwl.wf &amp;lt;- yaml::read_yaml(file.path(dir_path, &amp;quot;example/workflow_example.cwl&amp;quot;))
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>cwlVersion&lt;/code> component shows the CWL specification version used by the document.&lt;/li>
&lt;li>The &lt;code>class&lt;/code> component shows this document describes a &lt;code>Workflow&lt;/code>.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl.wf[1:2]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $class
## [1] &amp;quot;Workflow&amp;quot;
##
## $cwlVersion
## [1] &amp;quot;v1.0&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>inputs&lt;/code> section describes the inputs of the workflow.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl.wf[3]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $inputs
## $inputs$message
## [1] &amp;quot;string&amp;quot;
##
## $inputs$SampleName
## [1] &amp;quot;string&amp;quot;
##
## $inputs$results_path
## [1] &amp;quot;Directory&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>outputs&lt;/code> section describes the outputs of the workflow.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl.wf[4]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $outputs
## $outputs$string
## $outputs$string$outputSource
## [1] &amp;quot;echo/string&amp;quot;
##
## $outputs$string$type
## [1] &amp;quot;stdout&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>The &lt;code>steps&lt;/code> section describes the steps of the workflow. In this simple example,
we demonstrate one step.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cwl.wf[5]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $steps
## $steps$echo
## $steps$echo$`in`
## $steps$echo$`in`$message
## [1] &amp;quot;message&amp;quot;
##
## $steps$echo$`in`$SampleName
## [1] &amp;quot;SampleName&amp;quot;
##
## $steps$echo$`in`$results_path
## [1] &amp;quot;results_path&amp;quot;
##
##
## $steps$echo$out
## [1] &amp;quot;[string]&amp;quot;
##
## $steps$echo$run
## [1] &amp;quot;example/example.cwl&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="cwl-input-parameter">CWL Input Parameter&lt;/h3>
&lt;p>Next, let&amp;rsquo;s explore the &lt;em>.yml&lt;/em> file, which provide the input parameter values for all
the components we describe above.&lt;/p>
&lt;p>For this simple example, we have three parameters defined:&lt;/p>
&lt;pre>&lt;code class="language-r">yaml::read_yaml(file.path(dir_path, &amp;quot;example/example_single.yml&amp;quot;))
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $message
## [1] &amp;quot;Hello World!&amp;quot;
##
## $SampleName
## [1] &amp;quot;M1&amp;quot;
##
## $results_path
## $results_path$class
## [1] &amp;quot;Directory&amp;quot;
##
## $results_path$path
## [1] &amp;quot;./results&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Note that if we define an input component in the &lt;em>.cwl&lt;/em> file, this value needs
to be also defined here in the &lt;em>.yml&lt;/em> file.&lt;/p>
&lt;h3 id="reference">Reference&lt;/h3></description></item><item><title>Sp: SPR and CWL</title><link>/sp/spr/cwl/cwl_and_spr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/spr/cwl/cwl_and_spr/</guid><description>
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
document.querySelector("h1").className = "title";
});
&lt;/script>
&lt;script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
var links = document.links;
for (var i = 0, linksLength = links.length; i &lt; linksLength; i++)
if (links[i].hostname != window.location.hostname)
links[i].target = '_blank';
});
&lt;/script>
&lt;h2 id="how-to-connect-cwl-description-files-within-_systempiper_">How to connect CWL description files within &lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em>&lt;/h2>
&lt;p>This section will demonstrate how to connect CWL parameters files to create
workflows. In addition, we will show how the workflow can be easily scalable
with &lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em>.&lt;/p>
&lt;p>&lt;code>SYSargsList&lt;/code> container stores all the information and instructions needed for processing
a set of input files with a single or many command-line steps within a workflow
(i.e. several components of the software or several independent software tools).
The &lt;code>SYSargsList&lt;/code> object is created and fully populated with the &lt;code>SYSargsList&lt;/code> construct
function.
Full documentation of &lt;code>SYSargsList&lt;/code> management instances can be found &lt;a href="#sysargslist">here&lt;/a>
and &lt;a href="#appendstep">here&lt;/a>.&lt;/p>
&lt;p>The following imports a &lt;code>.cwl&lt;/code> file (here &lt;code>example.cwl&lt;/code>) for running the &lt;code>echo Hello World!&lt;/code>
example.&lt;/p>
&lt;pre>&lt;code class="language-r">HW &amp;lt;- SYSargsList(wf_file = &amp;quot;example/workflow_example.cwl&amp;quot;, input_file = &amp;quot;example/example_single.yml&amp;quot;,
dir_path = system.file(&amp;quot;extdata/cwl&amp;quot;, package = &amp;quot;systemPipeR&amp;quot;))
HW
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Instance of 'SYSargsList':
## WF Steps:
## 1. Step_x --&amp;gt; Status: Pending
## Total Files: 1 | Existing: 0 | Missing: 1
## 1.1. echo
## cmdlist: 1 | Pending: 1
##
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(HW)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $Step_x
## $Step_x$defaultid
## $Step_x$defaultid$echo
## [1] &amp;quot;echo Hello World! &amp;gt; results/M1.txt&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>However, we are limited to run just one command-line or one sample in this example.
To scale the command-line over many samples, a simple solution offered by &lt;code>systemPipeR&lt;/code>
is to provide a &lt;code>variable&lt;/code> for each of the parameters that we want to run with multiple samples.&lt;/p>
&lt;p>Let&amp;rsquo;s explore the example:&lt;/p>
&lt;pre>&lt;code class="language-r">dir_path &amp;lt;- system.file(&amp;quot;extdata/cwl&amp;quot;, package = &amp;quot;systemPipeR&amp;quot;)
yml &amp;lt;- yaml::read_yaml(file.path(dir_path, &amp;quot;example/example.yml&amp;quot;))
yml
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $message
## [1] &amp;quot;_STRING_&amp;quot;
##
## $SampleName
## [1] &amp;quot;_SAMPLE_&amp;quot;
##
## $results_path
## $results_path$class
## [1] &amp;quot;Directory&amp;quot;
##
## $results_path$path
## [1] &amp;quot;./results&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>For the &lt;code>message&lt;/code> and &lt;code>SampleName&lt;/code> parameter, we are passing a variable connecting
with a third file called &lt;code>targets.&lt;/code>&lt;/p>
&lt;p>Now, let&amp;rsquo;s explore the &lt;code>targets&lt;/code> file structure:&lt;/p>
&lt;pre>&lt;code class="language-r">targetspath &amp;lt;- system.file(&amp;quot;extdata/cwl/example/targets_example.txt&amp;quot;, package = &amp;quot;systemPipeR&amp;quot;)
read.delim(targetspath, comment.char = &amp;quot;#&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Message SampleName
## 1 Hello World! M1
## 2 Hello USA! M2
## 3 Hello Bioconductor! M3
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>targets&lt;/code> file defines all input files or values and sample ids of an analysis workflow.
For this example, we have defined a string message for the &lt;code>echo&lt;/code> command-line tool,
in the first column that will be evaluated, and the second column is the
&lt;code>SampleName&lt;/code> id for each one of the messages.
Any number of additional columns can be added as needed.&lt;/p>
&lt;p>Users should note here, the usage of &lt;code>targets&lt;/code> files is optional when using
&lt;code>systemPipeR's&lt;/code> new CWL interface. Since for organizing experimental variables targets
files are extremely useful and user-friendly. Thus, we encourage users to keep using them.&lt;/p>
&lt;h3 id="how-to-connect-the-parameter-files-and-targets-file-information">How to connect the parameter files and &lt;code>targets&lt;/code> file information?&lt;/h3>
&lt;p>The constructor function creates an &lt;code>SYSargsList&lt;/code> S4 class object connecting three input files:&lt;/p>
&lt;ul>
&lt;li>CWL command-line specification file (&lt;code>wf_file&lt;/code> argument);&lt;/li>
&lt;li>Input variables (&lt;code>input_file&lt;/code> argument);&lt;/li>
&lt;li>Targets file (&lt;code>targets&lt;/code> argument).&lt;/li>
&lt;/ul>
&lt;p>As demonstrated above, the latter is optional for workflow steps lacking input files.
The connection between input variables (here defined by &lt;code>input_file&lt;/code> argument)
and the &lt;code>targets&lt;/code> file are defined under the &lt;code>inputvars&lt;/code> argument.
A named vector is required, where each element name needs to match with column
names in the &lt;code>targets&lt;/code> file, and the value must match the names of the &lt;em>.yml&lt;/em>
variables. This is used to replace the CWL variable and construct all the command-line
for that particular step.&lt;/p>
&lt;p>The variable pattern &lt;code>_XXXX_&lt;/code> is used to distinguish CWL variables that target
columns will replace. This pattern is recommended for consistency and easy identification
but not enforced.&lt;/p>
&lt;p>The following imports a &lt;code>.cwl&lt;/code> file (same example demonstrated above) for running
the &lt;code>echo Hello World&lt;/code> example. However, now we are connecting the variable defined
on the &lt;code>.yml&lt;/code> file with the &lt;code>targets&lt;/code> file inputs.&lt;/p>
&lt;pre>&lt;code class="language-r">HW_mul &amp;lt;- SYSargsList(step_name = &amp;quot;echo&amp;quot;, targets = targetspath, wf_file = &amp;quot;example/workflow_example.cwl&amp;quot;,
input_file = &amp;quot;example/example.yml&amp;quot;, dir_path = dir_path, inputvars = c(Message = &amp;quot;_STRING_&amp;quot;,
SampleName = &amp;quot;_SAMPLE_&amp;quot;))
HW_mul
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Instance of 'SYSargsList':
## WF Steps:
## 1. echo --&amp;gt; Status: Pending
## Total Files: 3 | Existing: 0 | Missing: 3
## 1.1. echo
## cmdlist: 3 | Pending: 3
##
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(HW_mul)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $echo
## $echo$M1
## $echo$M1$echo
## [1] &amp;quot;echo Hello World! &amp;gt; results/M1.txt&amp;quot;
##
##
## $echo$M2
## $echo$M2$echo
## [1] &amp;quot;echo Hello USA! &amp;gt; results/M2.txt&amp;quot;
##
##
## $echo$M3
## $echo$M3$echo
## [1] &amp;quot;echo Hello Bioconductor! &amp;gt; results/M3.txt&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../../SPR_CWL_hello.png" alt="">
WConnectivity between CWL param files and targets files.&lt;/p>
&lt;h2 id="creating-the-cwl-param-files">Creating the CWL param files&lt;/h2>
&lt;p>In the next two sections, we will discuss how to use &lt;code>createParam&lt;/code> from SPR
to create CWL param files. In &lt;code>createParam&lt;/code>, there are two versions of syntax:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="../create_param_v1">version 1&lt;/a>: pseudo-bash script format, easy to write&lt;/li>
&lt;li>&lt;a href="../create_param_v2">version 2&lt;/a>: &lt;code>;&lt;/code> separated format, has more rules, but support
a lot more functionalities.&lt;/li>
&lt;/ol>
&lt;h2 id="contribute-new-cwl-files-to-_systempiper_">Contribute new CWL files to &lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em>&lt;/h2>
&lt;p>&lt;em>&lt;code>systemPipeR&lt;/code>&lt;/em> organizes a collection of &lt;a href="https://www.commonwl.org/">CWL&lt;/a> CommandLineTool and
Workflow descriptions for a variety of applications, that can be
found on Github &lt;a href="https://github.com/systemPipeR/cwl_collection">cwl_collection&lt;/a>.&lt;/p>
&lt;p>If you have new cwl files would like to add to this collection, submit a
&lt;a href="https://github.com/systemPipeR/cwl_collection/pulls">pull request&lt;/a>.&lt;/p>
&lt;p>After adding, new files will automatically trigger a
push to &lt;a href="https://github.com/tgirke/systemPipeRdata">&lt;em>systemPipeRdata&lt;/em> (SPRdata)&lt;/a>
and &lt;a href="https://github.com/tgirke/systemPipeR">&lt;em>systemPipeR&lt;/em> (SPR)&lt;/a> repositories master branch
shortly.&lt;/p></description></item><item><title>Sp: createParam V1</title><link>/sp/spr/cwl/create_param_v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/spr/cwl/create_param_v1/</guid><description>
&lt;pre>&lt;code class="language-r">suppressPackageStartupMessages({
library(systemPipeR)
})
&lt;/code>&lt;/pre>
&lt;p>&lt;code>createParam&lt;/code> by default uses the version 1 syntax, so there is no need to
provide additional version argument. We will see in the &lt;a href="../create_param_v2">next section&lt;/a> how to
use &lt;code>syntaxVersion&lt;/code> to change to the v2 syntax.&lt;/p>
&lt;h2 id="input">Input&lt;/h2>
&lt;p>Imagine we want to create CWL for command:&lt;/p>
&lt;pre>&lt;code class="language-bash">hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;p>To use &lt;code>createParam&lt;/code>, simply write the command in a pseudo-bash script format:&lt;/p>
&lt;pre>&lt;code class="language-r">command &amp;lt;- &amp;quot;
hisat2 \
-S &amp;lt;F, out: ./results/M1A.sam&amp;gt; \
-x &amp;lt;F: ./data/tair10.fasta&amp;gt; \
-k &amp;lt;int: 1&amp;gt; \
-min-intronlen &amp;lt;int: 30&amp;gt; \
-max-intronlen &amp;lt;int: 3000&amp;gt; \
-threads &amp;lt;int: 4&amp;gt; \
-U &amp;lt;F: ./data/SRR446027_1.fastq.gz&amp;gt;
&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="format">Format&lt;/h3>
&lt;p>What does the string above mean?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>First line is the base command. Each line is an argument with its default value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For argument lines (starting from the second line), any word before the first
space with leading &lt;code>-&lt;/code> or &lt;code>--&lt;/code> in each will be treated as a prefix, like &lt;code>-S&lt;/code> or
&lt;code>--min&lt;/code>. Any line without this first word will be treated as no prefix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All defaults are placed inside &lt;code>&amp;lt;...&amp;gt;&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>First argument is the input argument type. &amp;ldquo;File&amp;rdquo; (or &amp;ldquo;F&amp;rdquo;) for files, &amp;ldquo;int&amp;rdquo; for integers, &amp;ldquo;string&amp;rdquo; for character strings.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Optional: use the keyword &lt;code>out&lt;/code> followed the type with a &lt;code>,&lt;/code> comma separation to
indicate if this argument is also an CWL output.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then, use &lt;code>:&lt;/code> to separate keywords and default values, any non-space value after the &lt;code>:&lt;/code>
will be treated as the default value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If any argument has no default value, just a flag, like &lt;code>--verbose&lt;/code>, there is no need to add any &lt;code>&amp;lt;...&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="run-createparam-function">run &lt;code>createParam&lt;/code> Function&lt;/h2>
&lt;p>The string above that we just defined will be used as input for &lt;code>createParam&lt;/code>.&lt;/p>
&lt;p>If the format is correct, after parsing, the function will print the three components of the &lt;code>cwl&lt;/code> file:
- &lt;code>BaseCommand&lt;/code>: Specifies the program to execute.
- &lt;code>Inputs&lt;/code>: Defines the input parameters of the process.
- &lt;code>Outputs&lt;/code>: Defines the parameters representing the output of the process.&lt;/p>
&lt;p>The fourth printed component is the translated command-line from CWL.&lt;/p>
&lt;p>If in you are using R interactively, the function will verify that everything is correct and
will ask you to proceed. Here, the user can answer &amp;ldquo;no&amp;rdquo; and provide more
information at the string level. Another question is to save the param created here.&lt;/p>
&lt;p>If running the workflow in non-interactive mode, the &lt;code>createParam&lt;/code> function will
consider &amp;ldquo;yes&amp;rdquo; and returning the container.&lt;/p>
&lt;pre>&lt;code class="language-r">cmd &amp;lt;- createParam(command, writeParamFiles = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****BaseCommand*****
## hisat2
## *****Inputs*****
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
## k:
## type: int
## preF: -k
## yml: 1
## min-intronlen:
## type: int
## preF: -min-intronlen
## yml: 30
## max-intronlen:
## type: int
## preF: -max-intronlen
## yml: 3000
## threads:
## type: int
## preF: -threads
## yml: 4
## U:
## type: File
## preF: -U
## yml: ./data/SRR446027_1.fastq.gz
## *****Outputs*****
## output1:
## type: File
## value: ./results/M1A.sam
## *****Parsed raw command line*****
## hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;p>If the user chooses not to save the &lt;code>param&lt;/code> files on the above operation,
later, one can use the &lt;code>writeParamFiles&lt;/code> function.&lt;/p>
&lt;pre>&lt;code class="language-r">writeParamFiles(cmd, overwrite = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Written content of 'commandLine' to file:
## param/cwl/hisat2/hisat2.cwl
## Written content of 'commandLine' to file:
## param/cwl/hisat2/hisat2.yml
&lt;/code>&lt;/pre>
&lt;p>By default, the files will be saved inside &lt;code>./param/cwl/base_cmd&lt;/code>. It means a
child folder under &lt;em>param&lt;/em> then &lt;em>cwl&lt;/em>, and create a new folder named by the base command
of the command-line.&lt;/p>
&lt;h2 id="access-and-edit-param-files">Access and edit param files&lt;/h2>
&lt;h3 id="print-a-component">Print a component&lt;/h3>
&lt;pre>&lt;code class="language-r">printParam(cmd, position = &amp;quot;baseCommand&amp;quot;) ## Print a baseCommand section
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****BaseCommand*****
## hisat2
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">printParam(cmd, position = &amp;quot;outputs&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Outputs*****
## output1:
## type: File
## value: ./results/M1A.sam
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">printParam(cmd, position = &amp;quot;inputs&amp;quot;, index = 1:2) ## Print by index
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">printParam(cmd, position = &amp;quot;inputs&amp;quot;, index = -1:-2) ## Negative indexing printing to exclude certain indices in a position
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## k:
## type: int
## preF: -k
## yml: 1
## min-intronlen:
## type: int
## preF: -min-intronlen
## yml: 30
## max-intronlen:
## type: int
## preF: -max-intronlen
## yml: 3000
## threads:
## type: int
## preF: -threads
## yml: 4
## U:
## type: File
## preF: -U
## yml: ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;h3 id="subsetting-the-command-line">Subsetting the command-line&lt;/h3>
&lt;pre>&lt;code class="language-r">cmd2 &amp;lt;- subsetParam(cmd, position = &amp;quot;inputs&amp;quot;, index = 1:2, trim = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
## *****Parsed raw command line*****
## hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd2)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmd2 &amp;lt;- subsetParam(cmd, position = &amp;quot;inputs&amp;quot;, index = c(&amp;quot;S&amp;quot;, &amp;quot;x&amp;quot;), trim = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
## *****Parsed raw command line*****
## hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd2)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="replacing-a-existing-argument-in-the-command-line">Replacing a existing argument in the command-line&lt;/h3>
&lt;pre>&lt;code class="language-r">cmd3 &amp;lt;- replaceParam(cmd, &amp;quot;base&amp;quot;, index = 1, replace = list(baseCommand = &amp;quot;bwa&amp;quot;))
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Replacing baseCommand
## *****BaseCommand*****
## bwa
## *****Parsed raw command line*****
## bwa -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd3)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;bwa -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">new_inputs &amp;lt;- new_inputs &amp;lt;- list(
&amp;quot;new_input1&amp;quot; = list(type = &amp;quot;File&amp;quot;, preF=&amp;quot;-b&amp;quot;, yml =&amp;quot;myfile&amp;quot;),
&amp;quot;new_input2&amp;quot; = &amp;quot;-L &amp;lt;int: 4&amp;gt;&amp;quot;
)
cmd4 &amp;lt;- replaceParam(cmd, &amp;quot;inputs&amp;quot;, index = 1:2, replace = new_inputs)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Replacing inputs
## *****Inputs*****
## new_input1:
## type: File
## preF: -b
## yml: myfile
## new_input2:
## type: int
## preF: -L
## yml: 4
## k:
## type: int
## preF: -k
## yml: 1
## min-intronlen:
## type: int
## preF: -min-intronlen
## yml: 30
## max-intronlen:
## type: int
## preF: -max-intronlen
## yml: 3000
## threads:
## type: int
## preF: -threads
## yml: 4
## U:
## type: File
## preF: -U
## yml: ./data/SRR446027_1.fastq.gz
## *****Parsed raw command line*****
## hisat2 -b myfile -L 4 -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd4)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;hisat2 -b myfile -L 4 -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="adding-new-arguments">Adding new arguments&lt;/h3>
&lt;pre>&lt;code class="language-r">newIn &amp;lt;- new_inputs &amp;lt;- list(
&amp;quot;new_input1&amp;quot; = list(type = &amp;quot;File&amp;quot;, preF=&amp;quot;-b1&amp;quot;, yml =&amp;quot;myfile1&amp;quot;),
&amp;quot;new_input2&amp;quot; = list(type = &amp;quot;File&amp;quot;, preF=&amp;quot;-b2&amp;quot;, yml =&amp;quot;myfile2&amp;quot;),
&amp;quot;new_input3&amp;quot; = &amp;quot;-b3 &amp;lt;F: myfile3&amp;gt;&amp;quot;
)
cmd5 &amp;lt;- appendParam(cmd, &amp;quot;inputs&amp;quot;, index = 1:2, append = new_inputs)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Replacing inputs
## *****Inputs*****
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
## k:
## type: int
## preF: -k
## yml: 1
## min-intronlen:
## type: int
## preF: -min-intronlen
## yml: 30
## max-intronlen:
## type: int
## preF: -max-intronlen
## yml: 3000
## threads:
## type: int
## preF: -threads
## yml: 4
## U:
## type: File
## preF: -U
## yml: ./data/SRR446027_1.fastq.gz
## new_input1:
## type: File
## preF: -b1
## yml: myfile1
## new_input2:
## type: File
## preF: -b2
## yml: myfile2
## new_input3:
## type: File
## preF: -b3
## yml: myfile3
## *****Parsed raw command line*****
## hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz -b1 myfile1 -b2 myfile2 -b3 myfile3
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd5)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz -b1 myfile1 -b2 myfile2 -b3 myfile3&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmd6 &amp;lt;- appendParam(cmd, &amp;quot;inputs&amp;quot;, index = 1:2, after=0, append = new_inputs)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Replacing inputs
## *****Inputs*****
## new_input1:
## type: File
## preF: -b1
## yml: myfile1
## new_input2:
## type: File
## preF: -b2
## yml: myfile2
## new_input3:
## type: File
## preF: -b3
## yml: myfile3
## S:
## type: File
## preF: -S
## yml: ./results/M1A.sam
## x:
## type: File
## preF: -x
## yml: ./data/tair10.fasta
## k:
## type: int
## preF: -k
## yml: 1
## min-intronlen:
## type: int
## preF: -min-intronlen
## yml: 30
## max-intronlen:
## type: int
## preF: -max-intronlen
## yml: 3000
## threads:
## type: int
## preF: -threads
## yml: 4
## U:
## type: File
## preF: -U
## yml: ./data/SRR446027_1.fastq.gz
## *****Parsed raw command line*****
## hisat2 -b1 myfile1 -b2 myfile2 -b3 myfile3 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">cmdlist(cmd6)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;hisat2 -b1 myfile1 -b2 myfile2 -b3 myfile3 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="editing-output-param">Editing &lt;code>output&lt;/code> param&lt;/h3>
&lt;pre>&lt;code class="language-r">new_outs &amp;lt;- list(
&amp;quot;sam_out&amp;quot; = &amp;quot;&amp;lt;F: $(inputs.results_path)/test.sam&amp;gt;&amp;quot;
)
cmd7 &amp;lt;- replaceParam(cmd, &amp;quot;outputs&amp;quot;, index = 1, replace = new_outs)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Replacing outputs
## *****Outputs*****
## sam_out:
## type: File
## value: $(inputs.results_path)/test.sam
## *****Parsed raw command line*****
## hisat2 -S ./results/M1A.sam -x ./data/tair10.fasta -k 1 -min-intronlen 30 -max-intronlen 3000 -threads 4 -U ./data/SRR446027_1.fastq.gz
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">output(cmd7)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## $defaultid
## $defaultid$hisat2
## [1] &amp;quot;./results/test.sam&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>Sp: createParam V2</title><link>/sp/spr/cwl/create_param_v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sp/spr/cwl/create_param_v2/</guid><description>
&lt;p>&lt;code>createParam&lt;/code> has a second different set of input syntax version 2. To use this new
version &lt;code>createParam(..., syntaxVersion = &amp;quot;v2&amp;quot;)&lt;/code> must be provided.&lt;/p>
&lt;h2 id="new-in-v2">New in v2&lt;/h2>
&lt;p>What are the new features included in the v2?&lt;/p>
&lt;ul>
&lt;li>Support duplicated argument flags. Some programs uses the same flag, like
&lt;code>-f file1 -f file2 -f file3&lt;/code> for multiple files. This feature is added in v2.&lt;/li>
&lt;li>&lt;a href="https://www.commonwl.org/user_guide/03-input/index.html">CWL argument&lt;/a> component support.&lt;/li>
&lt;li>&lt;a href="https://www.commonwl.org/user_guide/03-input/index.html">CWL positions&lt;/a> in inputs and arguments components support.&lt;/li>
&lt;li>positional argument without any prefix.&lt;/li>
&lt;li>Prefix other than dash &lt;code>-&lt;/code> or &lt;code>--&lt;/code>. Some programs do not use dash as flags, for example some
uses &lt;code>@&lt;/code>. This is supported in v2.&lt;/li>
&lt;li>&lt;a href="https://www.commonwl.org/user_guide/05-stdout/index.html">CWL standard out&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.commonwl.org/user_guide/03-input/index.html">more types&lt;/a> support, long, float, double, boolean&lt;/li>
&lt;/ul>
&lt;h2 id="input">Input&lt;/h2>
&lt;p>Imagine we want to create CWL for command:&lt;/p>
&lt;pre>&lt;code class="language-r">suppressPackageStartupMessages({
library(systemPipeR)
})
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-bash">mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>To use &lt;code>createParam&lt;/code>, simply write the command in a pseudo-bash script format:&lt;/p>
&lt;pre>&lt;code class="language-r">command &amp;lt;- '
mycmd \
p: -s; File; sample1.txt \
p: -s; File; sample2.txt \
p: --c; ; \
p: -o; File; out: myout.txt \
ref_genome; File; a.fasta \
p: --nn; int; 12 \
mystdout; File; stdout: abc.txt
'
&lt;/code>&lt;/pre>
&lt;h3 id="format">Format&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>First line of the command-line object will be treated as the &lt;code>baseCommand&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each line specifies one argument and its default value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each line is composed with exact &lt;strong>2&lt;/strong> &lt;code>;&lt;/code> to separate &lt;strong>3&lt;/strong> columns. Some
columns can leave empty&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Text before first &lt;code>;&lt;/code> will be will used as prefix/names. If it starts with keyword &amp;ldquo;&lt;code>p:&lt;/code>&amp;rdquo;,
anything after &amp;ldquo;&lt;code>p:&lt;/code>&amp;rdquo; and before the first &lt;code>;&lt;/code> will be used as prefix, and the
name of this position will be the prefix but with leading dash(s) &amp;ldquo;&lt;code>-&lt;/code>&amp;rdquo;, &amp;ldquo;&lt;code>--&lt;/code>&amp;rdquo; removed.
If there is any duplication, a number index will be added to the end for the names.
If there is no keyword &amp;ldquo;&lt;code>p:&lt;/code>&amp;rdquo; before first &lt;code>;&lt;/code>, all text before first &lt;code>;&lt;/code> will be the name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If there is keyword &amp;ldquo;&lt;code>p:&lt;/code>&amp;rdquo; before first &lt;code>;&lt;/code> but nothing before and after the second &lt;code>;&lt;/code>,
this position will be treated as CWL &lt;strong>argument&lt;/strong> instead of input.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Text between first and second &lt;code>;&lt;/code> is type. Must be one of File, Directory, string, int, double, float, long, boolean.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Text after second &lt;code>;&lt;/code> and before &lt;code>\&lt;/code> or end of the line is the default value.
If it starts with keyword &amp;ldquo;&lt;code>out&lt;/code>&amp;rdquo; or &amp;ldquo;&lt;code>stdout&lt;/code>&amp;rdquo;, this position will also be added to outputs or standard output.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There is only &lt;strong>1&lt;/strong> line can have &amp;ldquo;&lt;code>stdout&lt;/code>&amp;rdquo; and usually it is the last position argument.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ending with &amp;ldquo;&lt;code>\&lt;/code>&amp;rdquo; is recommended but not required.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Below is a table of examples to demonstrate if values given or not given in different columns
how &lt;code>createParam&lt;/code> would translate them to.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>example&lt;/th>
&lt;th>name/prefix column&lt;/th>
&lt;th>type column&lt;/th>
&lt;th>value column&lt;/th>
&lt;th>translate to&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>first line&lt;/td>
&lt;td>mycmd&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>-&amp;gt;base command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no type, no value&lt;/td>
&lt;td>p: &amp;ndash;prefix;&lt;/td>
&lt;td>;&lt;/td>
&lt;td>&lt;/td>
&lt;td>-&amp;gt; arguments&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>with prefix, type, or value&lt;/td>
&lt;td>p: -prefix;&lt;/td>
&lt;td>type;&lt;/td>
&lt;td>default_value&lt;/td>
&lt;td>-&amp;gt; normal input&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no prefix&lt;/td>
&lt;td>name;&lt;/td>
&lt;td>type;&lt;/td>
&lt;td>default_value&lt;/td>
&lt;td>-&amp;gt; inputs no prefix&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>prefix other than dash&lt;/td>
&lt;td>p: @prefix;&lt;/td>
&lt;td>type;&lt;/td>
&lt;td>default_value&lt;/td>
&lt;td>-&amp;gt; inputs, prefix no dash&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output binding specified in third column&lt;/td>
&lt;td>p: -prefix;&lt;/td>
&lt;td>type;&lt;/td>
&lt;td>out: default_value&lt;/td>
&lt;td>-&amp;gt; inputs, outputs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>standard out binding specified in third column&lt;/td>
&lt;td>name;&lt;/td>
&lt;td>type;&lt;/td>
&lt;td>stdout: default_value&lt;/td>
&lt;td>-&amp;gt; stdout&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="run-createparam-function">run &lt;code>createParam&lt;/code> Function&lt;/h2>
&lt;p>The string above that we just defined will be used as input for &lt;code>createParam&lt;/code>.&lt;/p>
&lt;p>If the format is correct, after parsing, the function will print the three components of the &lt;code>cwl&lt;/code> file:&lt;/p>
&lt;ul>
&lt;li>&lt;code>BaseCommand&lt;/code>: Specifies the program to execute.&lt;/li>
&lt;li>&lt;code>Inputs&lt;/code>: Defines the input parameters of the process.&lt;/li>
&lt;li>&lt;code>Arguments&lt;/code>: Usually flags with some fixed values.&lt;/li>
&lt;li>&lt;code>Outputs&lt;/code>: Defines the parameters representing the output of the process.&lt;/li>
&lt;li>&lt;code>Stardard out&lt;/code>: stardard out capture of command-line.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-r">cmd &amp;lt;- createParam(command, writeParamFiles = FALSE, syntaxVersion = &amp;quot;v2&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****BaseCommand*****
## mycmd
## *****Arguments*****
## argument1:
## prefix: --c
## position: 3
## *****Inputs*****
## s1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## s2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## *****Outputs*****
## output1:
## type: File
## default value: myout.txt
## *****Standard Outputs*****
## mystdout:
## type: File
## default value: abc.txt
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>If the user chooses not to save the &lt;code>param&lt;/code> files on the above operation,
later, one can use the &lt;code>writeParamFiles&lt;/code> function.&lt;/p>
&lt;pre>&lt;code class="language-r">writeParamFiles(cmd, overwrite = TRUE, syntaxVersion = &amp;quot;v2&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Written content of 'commandLine' to file:
## param/cwl/mycmd/mycmd.cwl
## Written content of 'commandLine' to file:
## param/cwl/mycmd/mycmd.yml
&lt;/code>&lt;/pre>
&lt;p>By default, the files will be saved inside &lt;code>./param/cwl/base_cmd&lt;/code>. It means a
child folder under &lt;em>param&lt;/em> then &lt;em>cwl&lt;/em>, and create a new folder named by the base command
of the command-line.&lt;/p>
&lt;h2 id="access-and-edit-param-files">Access and edit param files&lt;/h2>
&lt;p>All access and edit functions have the ending of &lt;strong>2&lt;/strong>. Syntax v1 and v2 are &lt;strong>not interchangeable&lt;/strong>.
Params created by &lt;em>v1&lt;/em> cannot be used with &lt;em>v2&lt;/em> utility functions, &lt;em>vice versa&lt;/em>.&lt;/p>
&lt;p>Usage&lt;/p>
&lt;pre>&lt;code class="language-r">printParam2(sysargs, base = FALSE, args = FALSE, inputs = FALSE, outputs = FALSE, stdout = FALSE, raw_cmd = FALSE, all = TRUE)
appendParam2(sysargs, x, position = c(&amp;quot;inputs&amp;quot;, &amp;quot;args&amp;quot;, &amp;quot;outputs&amp;quot;), after = NULL, verbose = FALSE)
replaceParam2(sysargs, x, index=NULL,position = c(&amp;quot;inputs&amp;quot;, &amp;quot;baseCommand&amp;quot;, &amp;quot;args&amp;quot;, &amp;quot;outputs&amp;quot;, &amp;quot;stdout&amp;quot;), verbose = FALSE)
removeParam2(sysargs, index=NULL, position = c(&amp;quot;inputs&amp;quot;, &amp;quot;args&amp;quot;, &amp;quot;outputs&amp;quot;, &amp;quot;stdout&amp;quot;), verbose = FALSE)
renameParam2(sysargs, index=NULL, new_names, position = c(&amp;quot;inputs&amp;quot;, &amp;quot;args&amp;quot;, &amp;quot;outputs&amp;quot;, &amp;quot;stdout&amp;quot;), verbose = FALSE)
&lt;/code>&lt;/pre>
&lt;h4 id="format-of-utility-functions">Format of utility functions&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>printParam2&lt;/code>: print CWL components of desired, default is to print all.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>removeParam2&lt;/code>: removes items in certain positions you select.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>replaceParam2&lt;/code>: replaces the values in command-line with indices given in list by those given in values&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>renameParam2&lt;/code>: rename the names of items in certain position.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>appendParam2&lt;/code>: Add arguments to the original command line. Adding new &lt;code>basecommand&lt;/code> or standard out is not allowed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="x-format">x format&lt;/h4>
&lt;p>For append and replace functions, there is an argument &lt;code>x&lt;/code>. It can be either a length 1
character string or or a list.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If x is a character, it requires exact &lt;strong>3&lt;/strong> semi-colons &lt;code>;&lt;/code> to separate the string
in to &lt;strong>4 columns&lt;/strong>. Values before the third column are the same as &lt;code>createParam&lt;/code> inputs,
first column: prefix/argument name, second column: type, third column: default value.
The fourth column (new): numeric, index of the new item, this will be translated into
position entries in CWL.&lt;/p>
&lt;ul>
&lt;li>No &lt;code>\&lt;/code> should be added to the end.&lt;/li>
&lt;li>If the key word &lt;code>out&lt;/code> or &lt;code>stdout&lt;/code> is included in the default value column, the new
component will be treated as outputs or standard outputs.
Often times, &lt;strong>inputs and outputs are paired&lt;/strong> in CWL, and this is done automatically
in &lt;code>createParam&lt;/code> for you, but this is &lt;strong>not&lt;/strong> the case here. Since the &lt;code>position&lt;/code>
argument limit to modify only one place. It will be good
to check if the paired inputs component is there or otherwise append the inputs (see examples
below).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>If x is a list, it must be named. Following items must be included in list: &lt;code>name&lt;/code>, &lt;code>preF&lt;/code>,
&lt;code>type&lt;/code>, &lt;code>value&lt;/code>, &lt;code>index.&lt;/code> They refer to name, prefix, param type, default value,
and position index correspondingly.&lt;/p>
&lt;ul>
&lt;li>&lt;code>baseCommand&lt;/code> modification is &lt;strong>not supported&lt;/strong> to use list format.&lt;/li>
&lt;li>&lt;code>inputs&lt;/code> position requires the list contains following items: “name”, “preF”, “type”, “value”, “index”.&lt;/li>
&lt;li>&lt;code>args&lt;/code> position requires the list contains following items: “name”, “preF”, “index”.&lt;/li>
&lt;li>&lt;code>outputs&lt;/code> position requires the list contains following items: “name”, “type”, “value”.&lt;/li>
&lt;li>&lt;code>stdout&lt;/code> position requires the list contains following items: “name”, “type”, “value”.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>It will be more clear when we walk through examples below.&lt;/p>
&lt;h3 id="print-a-component">Print a component&lt;/h3>
&lt;p>&lt;code>printParam2&lt;/code> by default print out all CWL component positions. To select a
few of them to print, turn &lt;code>all = FALSE&lt;/code> and turn desired positions in
any combination to &lt;code>TRUE&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-r"># print only base command
printParam2(cmd, base = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****BaseCommand*****
## mycmd
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># print inputs and outputs
printParam2(cmd, inputs = TRUE, outputs = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## s1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## s2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## *****Outputs*****
## output1:
## type: File
## default value: myout.txt
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># print parsed raw command
printParam2(cmd, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;h3 id="appending-new-components">Appending new components&lt;/h3>
&lt;h4 id="adding-new-inputs">Adding new inputs&lt;/h4>
&lt;pre>&lt;code class="language-r">new_cmd &amp;lt;- 'p: -abc; string; abc; 7'
cmd &amp;lt;- appendParam2(cmd, new_cmd, position = &amp;quot;inputs&amp;quot;)
printParam2(cmd, inputs = TRUE, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## s1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## s2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## abc:
## type: string
## prefix: -abc
## default value: abc
## position: 7
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>We can see that a new parameter &lt;code>-abc&lt;/code> and its value &lt;code>abc&lt;/code> has been added to the last
command flag before the standard out.&lt;/p>
&lt;p>Alternative, we can do the same with &lt;code>list&lt;/code> format:&lt;/p>
&lt;pre>&lt;code class="language-r">new_cmd_list &amp;lt;- list(name = &amp;quot;abc&amp;quot;, preF = &amp;quot;-abc&amp;quot;, type = &amp;quot;string&amp;quot;, value = &amp;quot;abc&amp;quot;, index = 7)
appendParam2(cmd, new_cmd_list, position = &amp;quot;inputs&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h4 id="adding-new-output">Adding new output&lt;/h4>
&lt;pre>&lt;code class="language-r">new_cmd &amp;lt;- 'new_out; File; out: new_file.txt;'
commandline &amp;lt;- appendParam2(cmd, new_cmd, position = &amp;quot;outputs&amp;quot;, verbose = T)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Detected type is: out
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Appnding to the 2th position in the list
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****BaseCommand*****
## mycmd
## *****Arguments*****
## argument1:
## prefix: --c
## position: 3
## *****Inputs*****
## s1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## s2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## abc:
## type: string
## prefix: -abc
## default value: abc
## position: 7
## *****Outputs*****
## output1:
## type: File
## default value: myout.txt
## new_out:
## type: File
## default value: new_file.txt
## *****Standard Outputs*****
## mystdout:
## type: File
## default value: abc.txt
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Note: New output appended. However, outputs are often come in pairs with inputs. Make sure the corresponding input is there, or append it.
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">printParam2(cmd, outputs = TRUE, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Outputs*****
## output1:
## type: File
## default value: myout.txt
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>Alternative, we can do the same with &lt;code>list&lt;/code> format:&lt;/p>
&lt;pre>&lt;code class="language-r">new_cmd_list &amp;lt;- list(name = &amp;quot;new_out&amp;quot;, type = &amp;quot;File&amp;quot;, value = &amp;quot;abc.txt&amp;quot;)
appendParam2(cmd, new_cmd_list, position = &amp;quot;outputs&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>However, the problem as you may have seen in the message of running &lt;code>appendParam2&lt;/code>
is that &lt;code>inputs&lt;/code> and &lt;code>outputs&lt;/code> are often paired in CWL. So most times, we want to
also to append the related &lt;code>inputs&lt;/code> part to make CWL work.&lt;/p>
&lt;pre>&lt;code class="language-r">new_cmd &amp;lt;- 'p: -new; File; new_file.txt; 99'
commandline &amp;lt;- appendParam2(cmd, new_cmd, position = &amp;quot;inputs&amp;quot;)
printParam2(cmd, all = FALSE, inputs = TRUE, outputs = TRUE, raw_cmd = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## s1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## s2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## abc:
## type: string
## prefix: -abc
## default value: abc
## position: 7
## *****Outputs*****
## output1:
## type: File
## default value: myout.txt
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt --c -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>This time, most of the string is similar to the &lt;code>output&lt;/code> one, but remember to remove
keyword &lt;strong>out:&lt;/strong> and &lt;strong>add prefix&lt;/strong> if necessary.&lt;/p>
&lt;h3 id="replacing-existing-ones">Replacing existing ones&lt;/h3>
&lt;h5 id="replace-argument">Replace argument&lt;/h5>
&lt;pre>&lt;code class="language-r">new_cmd &amp;lt;- list(name = &amp;quot;new_arg2&amp;quot;, preF = &amp;quot;--haha&amp;quot;, index = 7)
cmd &amp;lt;- replaceParam2(cmd, new_cmd, index = &amp;quot;argument1&amp;quot;, position = &amp;quot;args&amp;quot;)
printParam2(cmd, args = TRUE, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Arguments*****
## new_arg2:
## prefix: --haha
## position: 7
## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt -o myout.txt a.fasta --nn 12 -abc abc --haha &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>We can see from above that one good thing of &lt;code>list&lt;/code> format is that the
component name and prefix can be different, whereas in string format, the name is
always the prefix word without leading dash(s).&lt;/p>
&lt;/blockquote>
&lt;h5 id="replacing-other-posistions">Replacing other posistions&lt;/h5>
&lt;p>Replacing other positions will be very similar to the example above, we will not
list them all here. One quick note is that the &lt;code>index&lt;/code> in &lt;code>replaceParam2&lt;/code> is different
than the &lt;code>index&lt;/code> item in the list &lt;code>new_cmd&lt;/code>. In &lt;code>replaceParam2&lt;/code> it means which
argument in &lt;code>cmd&lt;/code> we want to replace, it can be the &lt;strong>name of that component or using a number&lt;/strong>
to index it. In &lt;code>new_cmd&lt;/code>, &lt;code>index&lt;/code> means the CWL parameter position, it
can &lt;strong>only be a number&lt;/strong>. This will be reflected in the parsed raw command.&lt;/p>
&lt;p>If we change the &lt;code>index&lt;/code> in &lt;code>new_cmd&lt;/code> to a different number, watch closely how
parsed raw command change:&lt;/p>
&lt;p>&lt;strong>Before&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-r">printParam2(cmd, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Parsed raw command line*****
## mycmd -s sample1.txt -s sample2.txt -o myout.txt a.fasta --nn 12 -abc abc --haha &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>After&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-r">new_cmd &amp;lt;- list(name = &amp;quot;new_arg2&amp;quot;, preF = &amp;quot;--haha&amp;quot;, index = 1)
cmd &amp;lt;- replaceParam2(cmd, new_cmd, index = &amp;quot;new_arg2&amp;quot;, position = &amp;quot;args&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Param name new_arg2 exists, it will be renamed to: new_arg2_zk1
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">printParam2(cmd, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Parsed raw command line*****
## mycmd -s sample1.txt --haha -s sample2.txt -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;h3 id="rename-a-component">Rename a component&lt;/h3>
&lt;h3 id="replace-a-single-component">Replace a single component&lt;/h3>
&lt;p>Replace the new argument we just replaced for example:&lt;/p>
&lt;pre>&lt;code class="language-r">cmd &amp;lt;- renameParam2(cmd, new_names = &amp;quot;my_arg_renamed&amp;quot;, index = 1, position = &amp;quot;args&amp;quot;)
printParam2(cmd, args = TRUE, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Arguments*****
## my_arg_renamed:
## prefix: --haha
## position: 1
## *****Parsed raw command line*****
## mycmd -s sample1.txt --haha -s sample2.txt -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;h3 id="replace-multiple-components">Replace multiple components&lt;/h3>
&lt;pre>&lt;code class="language-r">cmd &amp;lt;- renameParam2(cmd, new_names = c(&amp;quot;file1&amp;quot;, &amp;quot;file2&amp;quot;), index = c(&amp;quot;s1&amp;quot;, &amp;quot;s2&amp;quot;), position = &amp;quot;inputs&amp;quot;)
printParam2(cmd, inputs = TRUE, raw_cmd = TRUE, all = FALSE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## file1:
## type: File
## prefix: -s
## default value: sample1.txt
## position: 1
## file2:
## type: File
## prefix: -s
## default value: sample2.txt
## position: 2
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## abc:
## type: string
## prefix: -abc
## default value: abc
## position: 7
## *****Parsed raw command line*****
## mycmd -s sample1.txt --haha -s sample2.txt -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>length of &lt;code>new_names&lt;/code> must be the same as &lt;code>index&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="remove-components">Remove components&lt;/h3>
&lt;pre>&lt;code class="language-r">cmd &amp;lt;- removeParam2(cmd, index = 1:2, position = &amp;quot;inputs&amp;quot;)
printParam2(cmd, all = FALSE, inputs = TRUE, raw_cmd = TRUE)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## *****Inputs*****
## o:
## type: File
## prefix: -o
## default value: myout.txt
## position: 4
## ref_genome:
## type: File
## prefix:
## default value: a.fasta
## position: 5
## nn:
## type: int
## prefix: --nn
## default value: 12
## position: 6
## abc:
## type: string
## prefix: -abc
## default value: abc
## position: 7
## *****Parsed raw command line*****
## mycmd --haha -o myout.txt a.fasta --nn 12 -abc abc &amp;gt; abc.txt
&lt;/code>&lt;/pre></description></item></channel></rss>